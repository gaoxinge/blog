{
    "docs": [
        {
            "location": "/", 
            "text": "\ufeff\u6b64\u535a\u5ba2\u7528\u4e8e\u5b66\u4e60\u8bed\u8a00\u548c\u7b97\u6cd5\u3002\n\n\npython\n\n\n\n\nPython\u6838\u5fc3\u7f16\u7a0b\n\n\nPython Documentation\n\n\n\n\nc\n\n\n\n\nC Primer Plus\n\n\n\n\nc++\n\n\n\n\nC++ Primer\n\n\n\n\n\u7b97\u6cd5\n\n\n\n\n\u7b97\u6cd5\u5bfc\u8bba\n\n\n\n\n\u7f51\u7ad9\n\n\n\n\n\u725b\u5ba2\u7f51", 
            "title": "\u535a\u5ba2"
        }, 
        {
            "location": "/#python", 
            "text": "Python\u6838\u5fc3\u7f16\u7a0b  Python Documentation", 
            "title": "python"
        }, 
        {
            "location": "/#c", 
            "text": "C Primer Plus", 
            "title": "c"
        }, 
        {
            "location": "/#c_1", 
            "text": "C++ Primer", 
            "title": "c++"
        }, 
        {
            "location": "/#_1", 
            "text": "\u7b97\u6cd5\u5bfc\u8bba", 
            "title": "\u7b97\u6cd5"
        }, 
        {
            "location": "/#_2", 
            "text": "\u725b\u5ba2\u7f51", 
            "title": "\u7f51\u7ad9"
        }, 
        {
            "location": "/index_\u76ee\u5f55/", 
            "text": "\ufeff\u8fd9\u662f\u535a\u5ba2\u7684\u76ee\u5f55\u3002\n\n\npython\n\n\n\n\npython\n\n\n\u89c4\u8303\n\n\n\u7f29\u8fdb\n\n\n\u7f16\u7801\n\n\n\u6a21\u5757\n\n\n\u5e93\n\n\n\u8c03\u8bd5\n\n\n\u6d4b\u8bd5\n\n\nc\u548cc++\n\n\n\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54\n\n\n\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54\n\n\n\n\nc\n\n\n\n\nc\n\n\n\n\nc++\n\n\n\n\nc++\n\n\n\u89c4\u8303\n\n\n\n\n\u7b97\u6cd5", 
            "title": "\u76ee\u5f55"
        }, 
        {
            "location": "/index_\u76ee\u5f55/#python", 
            "text": "python  \u89c4\u8303  \u7f29\u8fdb  \u7f16\u7801  \u6a21\u5757  \u5e93  \u8c03\u8bd5  \u6d4b\u8bd5  c\u548cc++  \u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54  \u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54", 
            "title": "python"
        }, 
        {
            "location": "/index_\u76ee\u5f55/#c", 
            "text": "c", 
            "title": "c"
        }, 
        {
            "location": "/index_\u76ee\u5f55/#c_1", 
            "text": "c++  \u89c4\u8303", 
            "title": "c++"
        }, 
        {
            "location": "/index_\u76ee\u5f55/#_1", 
            "text": "", 
            "title": "\u7b97\u6cd5"
        }, 
        {
            "location": "/python_python/", 
            "text": "\ufeff\npython\n\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u7531\nGuido van Rossum\n\u64b0\u5199\uff0c\u5e76\u7531\nPython Software Foundation\n\u7ef4\u62a4\u3002\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\npython\u6709\u81ea\u5df1\u7684\n\u5b98\u7f51\n\u548c\nGithub\n\uff0c\u5747\u7531python software foundation\u7ef4\u62a4\u3002\n\n\n\u53d7\u6b22\u8fce\n\n\npython\u4e3a\u4ec0\u4e48\u5982\u6b64\u53d7\u6b22\u8fce\uff1f\u4e3b\u8981\u56e0\u4e3apython\u7b80\u6d01\uff0c\u6613\u8bfb\u7684\u8bed\u8a00\u7279\u6027\uff0c\u4ee5\u53ca\u5f3a\u5927\u7684\u7b2c\u4e09\u65b9\u5e93\u652f\u6301\u3002\n\n\n\u89e3\u91ca\u5668\n\n\npython\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\n\n\n\u89e3\u91ca\u5668                  \u5b9e\u73b0\u8bed\u8a00\nCPython                   C\nPyPy                      Python\nJython                    Java\nBrython                   JavaScript\nRubyPython                Ruby\nIronPython                C#\nMicroPython               ?\n\n\n\n\n\u5176\u4e2dCPython\u662f\u7528\u7684\u6700\u591a\u7684\uff0c\u4e5f\u662f\u5b98\u7f51\u652f\u6301\u7684\u89e3\u91ca\u5668\uff0c\u53ef\u53c2\u89c1\n\u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591aPython\n\u3002\n\n\n\u5b89\u88c5\n\n\n\n\npython\n\n\nidle\uff1apython\u81ea\u5e26\u7684ide\n\n\ncommand line\uff1apython\u81ea\u5e26\u7684\u4ea4\u4e92\n\n\npywin32\n\n\n\u6211\u7684\u914d\u7f6e\n\n\n\u89e3\u91ca\u5668\n\n\n\u7f16\u8f91\u5668", 
            "title": "python"
        }, 
        {
            "location": "/python_python/#_1", 
            "text": "python\u6709\u81ea\u5df1\u7684 \u5b98\u7f51 \u548c Github \uff0c\u5747\u7531python software foundation\u7ef4\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/python_python/#_2", 
            "text": "python\u4e3a\u4ec0\u4e48\u5982\u6b64\u53d7\u6b22\u8fce\uff1f\u4e3b\u8981\u56e0\u4e3apython\u7b80\u6d01\uff0c\u6613\u8bfb\u7684\u8bed\u8a00\u7279\u6027\uff0c\u4ee5\u53ca\u5f3a\u5927\u7684\u7b2c\u4e09\u65b9\u5e93\u652f\u6301\u3002", 
            "title": "\u53d7\u6b22\u8fce"
        }, 
        {
            "location": "/python_python/#_3", 
            "text": "python\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982  \u89e3\u91ca\u5668                  \u5b9e\u73b0\u8bed\u8a00\nCPython                   C\nPyPy                      Python\nJython                    Java\nBrython                   JavaScript\nRubyPython                Ruby\nIronPython                C#\nMicroPython               ?  \u5176\u4e2dCPython\u662f\u7528\u7684\u6700\u591a\u7684\uff0c\u4e5f\u662f\u5b98\u7f51\u652f\u6301\u7684\u89e3\u91ca\u5668\uff0c\u53ef\u53c2\u89c1 \u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591aPython \u3002", 
            "title": "\u89e3\u91ca\u5668"
        }, 
        {
            "location": "/python_python/#_4", 
            "text": "python  idle\uff1apython\u81ea\u5e26\u7684ide  command line\uff1apython\u81ea\u5e26\u7684\u4ea4\u4e92  pywin32  \u6211\u7684\u914d\u7f6e  \u89e3\u91ca\u5668  \u7f16\u8f91\u5668", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/python_\u89c4\u8303/", 
            "text": "\ufeff\u4e0b\u9762\u6211\u4eec\u7814\u7a76\u4e00\u4e0bpython\u7684\u98ce\u683c\u89c4\u8303\u3002\n\n\nPython Enhancement Proposal\n\n\n\u8fd9\u5c31\u662f\u6211\u4eec\u719f\u6089\u7684\nPEP\n\u3002\n\n\nPEP 0\n\n\nPEP 0\n\uff0c\u5373Index of Python Enhancement Proposals\uff0c\u4e3aPEP\u7684\u76ee\u5f55\u3002\n\n\nPEP 7\n\n\nPEP  7\n\uff0c\u5373CPython\u7684c\u4ee3\u7801\u98ce\u683c\u89c4\u8303\u3002\n\n\nPEP 8\n\n\nPEP 8\n\uff0c\u5373python\u7684\u4ee3\u7801\u98ce\u683c\u89c4\u8303\uff0c\u5177\u4f53\u53ef\u53c2\u89c1\n\n\n\n\nStyle Guide for Python Code\n\n\npython\u4ee3\u7801\u98ce\u683c\u6307\u5357\n\n\nPython \u7f16\u7801\u98ce\u683c\u6307\u5357\n\n\nCode Like a Pythonista: Idiomatic Python\n\n\n\n\nPEP 20\n\n\nPEP 20\n\uff0c\u5373\u8457\u540d\u7684python\u4e4b\u7985\u3002\n\n\n import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n \n\n # \u4f60\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u8fd9\u53e5\n\n import antigravity\n\n\n\n\nGoogle\u5f00\u6e90\u9879\u76ee\u98ce\u683c\u6307\u5357\n\n\nGoogle Style Guide\n\u662fGoogle\u4e3a\u4e00\u4e9b\u8bed\u8a00\u5b9a\u5236\u7684\u98ce\u683c\u89c4\u8303\uff0c\u6bd4\u5982python\u3002", 
            "title": "\u89c4\u8303"
        }, 
        {
            "location": "/python_\u89c4\u8303/#python-enhancement-proposal", 
            "text": "\u8fd9\u5c31\u662f\u6211\u4eec\u719f\u6089\u7684 PEP \u3002", 
            "title": "Python Enhancement Proposal"
        }, 
        {
            "location": "/python_\u89c4\u8303/#pep-0", 
            "text": "PEP 0 \uff0c\u5373Index of Python Enhancement Proposals\uff0c\u4e3aPEP\u7684\u76ee\u5f55\u3002", 
            "title": "PEP 0"
        }, 
        {
            "location": "/python_\u89c4\u8303/#pep-7", 
            "text": "PEP  7 \uff0c\u5373CPython\u7684c\u4ee3\u7801\u98ce\u683c\u89c4\u8303\u3002", 
            "title": "PEP 7"
        }, 
        {
            "location": "/python_\u89c4\u8303/#pep-8", 
            "text": "PEP 8 \uff0c\u5373python\u7684\u4ee3\u7801\u98ce\u683c\u89c4\u8303\uff0c\u5177\u4f53\u53ef\u53c2\u89c1   Style Guide for Python Code  python\u4ee3\u7801\u98ce\u683c\u6307\u5357  Python \u7f16\u7801\u98ce\u683c\u6307\u5357  Code Like a Pythonista: Idiomatic Python", 
            "title": "PEP 8"
        }, 
        {
            "location": "/python_\u89c4\u8303/#pep-20", 
            "text": "PEP 20 \uff0c\u5373\u8457\u540d\u7684python\u4e4b\u7985\u3002   import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!    # \u4f60\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u8fd9\u53e5  import antigravity", 
            "title": "PEP 20"
        }, 
        {
            "location": "/python_\u89c4\u8303/#google", 
            "text": "Google Style Guide \u662fGoogle\u4e3a\u4e00\u4e9b\u8bed\u8a00\u5b9a\u5236\u7684\u98ce\u683c\u89c4\u8303\uff0c\u6bd4\u5982python\u3002", 
            "title": "Google\u5f00\u6e90\u9879\u76ee\u98ce\u683c\u6307\u5357"
        }, 
        {
            "location": "/python_\u7f29\u8fdb/", 
            "text": "\ufeffpython\u662f\u4e00\u4e2a\u5f88\u5403\u7f29\u8fdb\u7684\u8bed\u8a00\uff0c\u4ee5\u7a7a\u683c\u548c\u5236\u8868\u7b26\u5f00\u59cb\uff0c\u5fc5\u987b\u4fdd\u6301\u67d0\u79cd\u4e00\u81f4\u6027\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\u4e0b\u9762\u662f\u76f8\u5173\u672f\u8bed\u7684\u7ffb\u8bd1\n\n\n\n\n\u56de\u8f66/\u6362\u884c\uff1aenter\n\n\n\u7a7a\u683c\uff1aspace\n\n\n\u5236\u8868\u7b26\uff1atab\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u4e0d\u540c\u7f16\u8f91\u5668\u5bf9python\u4ee3\u7801\u7684\u5f71\u54cd\u3002\n\n\n\u7814\u7a76\u65b9\u5f0f\n\n\n\u6211\u4eec\u91c7\u7528\u4e24\u79cd\u7814\u7a76\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\uff0c\u7528\u4e0d\u540c\u7684\u7f16\u8f91\u5668\u5199\u4ee3\u7801\uff0c\u7136\u540e\u7528\u8bb0\u4e8b\u672c\u6253\u5f00\u3002\u7b2c\u4e8c\u79cd\uff0c\u5728python\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\n\n\nwith open('***.py') as f:\n    s = f.read()\n\n\n\n\n\u7f16\u8f91\u5668\n\n\n\u901a\u8fc7\u4e0a\u8ff0\u7814\u7a76\uff0c\u6211\u4eec\u53d1\u73b0\u5f71\u54cd\u4ee3\u7801\u7684\u56e0\u7d20\u4e3b\u8981\u4e3a\u7f16\u8f91\u5668\u63d0\u4f9b\u7684\u81ea\u52a8\u7f29\u8fdb\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5176\u5bf9\u5236\u8868\u7b26\u7684\u89e3\u8bfb\u3002\n\n\n\n\n\u8bb0\u4e8b\u672c\n\n\n\u81ea\u52a8\u7f29\u8fdb\uff1a\u65e0\n\n\n\u8f93\u5165\u5236\u8868\u7b26\uff1a\\t\n\n\n\u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\u516b\u4e2a\u7a7a\u683c\n\n\nnotepad++\n\n\n\u81ea\u52a8\u7f29\u8fdb\uff1a\\t\n\n\n\u8f93\u5165\u5236\u8868\u7b26\uff1a\\t\n\n\n\u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\u516b\u4e2a\u7a7a\u683c\n\n\nidle\uff08python\u81ea\u5e26ide\uff09\n\n\n\u81ea\u52a8\u7f29\u8fdb\uff1a\u56db\u4e2a\u7a7a\u683c\n\n\n\u8f93\u5165\u5236\u8868\u7b26\uff1a\u56db\u4e2a\u7a7a\u683c\n\n\n\u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\\t\n\n\ncommand line\uff08python\u81ea\u5e26shell\uff09\n\n\n\u81ea\u52a8\u7f29\u8fdb\uff1a\u65e0\n\n\n\u8f93\u5165\u5236\u8868\u7b26\uff1a\\t\n\n\n\u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\u516b\u4e2a\u7a7a\u683c\n\n\n\n\n\u8f6c\u5316\n\n\n\u8003\u8651\u4e0b\u9762\u4ee3\u7801\n\n\ndef f(a,b):\n    a = 1\n    b = 1\n    return a + b\n\n\n\n\n\n\n\u628anotepad++\u8f6c\u5316\u4e3aidle\n\n\n\n\n\u76f4\u63a5\u8f6c\u5316\u540e\uff0c\u7f16\u8bd1\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u6240\u6709\u7f29\u8fdb\u5747\u4e3a\u4e00\u4e2a\u5236\u8868\u7b26\u3002\u4f46\u6211\u4eec\u518d\u8f93\u5165\u5236\u8868\u7b26\uff08\u60c5\u51b5\u4f1a\u5f88\u590d\u6742\uff0c\u6211\u4eec\u5047\u8bbe\u53ea\u6539\u7b2c\u4e8c\u884c\uff09\uff0cidle\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u65f6\u7b2c\u4e8c\u884c\u7f29\u8fdb\u4e3a\u516b\u4e2a\u7a7a\u683c\u3002\u8fdb\u4e00\u6b65\uff0c\u518d\u7528notepad++\u6253\u5f00\uff0c\u53c8\u53ef\u4ee5\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u65f6\u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\u4e3a\u516b\u4e2a\u7a7a\u683c\u3002\n\n\n\n\n\u628aidle\u8f6c\u5316\u4e3anotepad++\n\n\n\n\n\u76f4\u63a5\u8f6c\u5316\u540e\uff0c\u7f16\u8bd1\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u6240\u6709\u7f29\u8fdb\u5747\u4e3a\u56db\u4e2a\u7a7a\u683c\u3002\u4f46\u6211\u4eec\u518d\u8f93\u5165\u5236\u8868\u7b26\uff08\u60c5\u51b5\u6ca1\u90a3\u4e48\u590d\u6742\uff09\uff0cnotepad++\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff0c\u539f\u56e0\u663e\u7136\u3002\u8fdb\u4e00\u6b65\uff0c\u518d\u7528idle\u6253\u5f00\uff0c\u8fd8\u662f\u4e0d\u53ef\u7f16\u8bd1\uff0c\u539f\u56e0\u4ea6\u663e\u7136\u3002\n\n\n\u7ed3\u679c\n\n\n\u7efc\u4e0a\uff0c\u5f71\u54cd\u4ee3\u7801\u6700\u5173\u952e\u7684\u56e0\u7d20\u4e3a\u7f16\u8f91\u5668\u5bf9\u81ea\u52a8\u7f29\u8fdb\u548c\u5236\u8868\u7b26\u7684\u89e3\u8bfb\u4e0d\u540c\uff0c\u89e3\u51b3\u529e\u6cd5\u662f\u5c06notepad++\u7684\u81ea\u52a8\u7f29\u8fdb\u548c\u5236\u8868\u7b26\u5747\u8bbe\u7f6e\u6210\u56db\u4e2a\u7a7a\u683c\uff0c\u5177\u4f53\u53c2\u89c1\nNotepad++\u7f16\u8f91Pyhton\u6587\u4ef6\u7684\u81ea\u52a8\u7f29\u8fdb\u7684\u95ee\u9898\uff08\u56fe\u6587\uff09\u66f4\u65b0\u5230v6.7.9.2\n\u3002", 
            "title": "\u7f29\u8fdb"
        }, 
        {
            "location": "/python_\u7f29\u8fdb/#_1", 
            "text": "\u6211\u4eec\u91c7\u7528\u4e24\u79cd\u7814\u7a76\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\uff0c\u7528\u4e0d\u540c\u7684\u7f16\u8f91\u5668\u5199\u4ee3\u7801\uff0c\u7136\u540e\u7528\u8bb0\u4e8b\u672c\u6253\u5f00\u3002\u7b2c\u4e8c\u79cd\uff0c\u5728python\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801  with open('***.py') as f:\n    s = f.read()", 
            "title": "\u7814\u7a76\u65b9\u5f0f"
        }, 
        {
            "location": "/python_\u7f29\u8fdb/#_2", 
            "text": "\u901a\u8fc7\u4e0a\u8ff0\u7814\u7a76\uff0c\u6211\u4eec\u53d1\u73b0\u5f71\u54cd\u4ee3\u7801\u7684\u56e0\u7d20\u4e3b\u8981\u4e3a\u7f16\u8f91\u5668\u63d0\u4f9b\u7684\u81ea\u52a8\u7f29\u8fdb\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5176\u5bf9\u5236\u8868\u7b26\u7684\u89e3\u8bfb\u3002   \u8bb0\u4e8b\u672c  \u81ea\u52a8\u7f29\u8fdb\uff1a\u65e0  \u8f93\u5165\u5236\u8868\u7b26\uff1a\\t  \u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\u516b\u4e2a\u7a7a\u683c  notepad++  \u81ea\u52a8\u7f29\u8fdb\uff1a\\t  \u8f93\u5165\u5236\u8868\u7b26\uff1a\\t  \u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\u516b\u4e2a\u7a7a\u683c  idle\uff08python\u81ea\u5e26ide\uff09  \u81ea\u52a8\u7f29\u8fdb\uff1a\u56db\u4e2a\u7a7a\u683c  \u8f93\u5165\u5236\u8868\u7b26\uff1a\u56db\u4e2a\u7a7a\u683c  \u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\\t  command line\uff08python\u81ea\u5e26shell\uff09  \u81ea\u52a8\u7f29\u8fdb\uff1a\u65e0  \u8f93\u5165\u5236\u8868\u7b26\uff1a\\t  \u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\uff1a\u516b\u4e2a\u7a7a\u683c", 
            "title": "\u7f16\u8f91\u5668"
        }, 
        {
            "location": "/python_\u7f29\u8fdb/#_3", 
            "text": "\u8003\u8651\u4e0b\u9762\u4ee3\u7801  def f(a,b):\n    a = 1\n    b = 1\n    return a + b   \u628anotepad++\u8f6c\u5316\u4e3aidle   \u76f4\u63a5\u8f6c\u5316\u540e\uff0c\u7f16\u8bd1\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u6240\u6709\u7f29\u8fdb\u5747\u4e3a\u4e00\u4e2a\u5236\u8868\u7b26\u3002\u4f46\u6211\u4eec\u518d\u8f93\u5165\u5236\u8868\u7b26\uff08\u60c5\u51b5\u4f1a\u5f88\u590d\u6742\uff0c\u6211\u4eec\u5047\u8bbe\u53ea\u6539\u7b2c\u4e8c\u884c\uff09\uff0cidle\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u65f6\u7b2c\u4e8c\u884c\u7f29\u8fdb\u4e3a\u516b\u4e2a\u7a7a\u683c\u3002\u8fdb\u4e00\u6b65\uff0c\u518d\u7528notepad++\u6253\u5f00\uff0c\u53c8\u53ef\u4ee5\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u65f6\u7f16\u8bd1\u65f6\u7684\u5236\u8868\u7b26\u4e3a\u516b\u4e2a\u7a7a\u683c\u3002   \u628aidle\u8f6c\u5316\u4e3anotepad++   \u76f4\u63a5\u8f6c\u5316\u540e\uff0c\u7f16\u8bd1\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u6240\u6709\u7f29\u8fdb\u5747\u4e3a\u56db\u4e2a\u7a7a\u683c\u3002\u4f46\u6211\u4eec\u518d\u8f93\u5165\u5236\u8868\u7b26\uff08\u60c5\u51b5\u6ca1\u90a3\u4e48\u590d\u6742\uff09\uff0cnotepad++\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff0c\u539f\u56e0\u663e\u7136\u3002\u8fdb\u4e00\u6b65\uff0c\u518d\u7528idle\u6253\u5f00\uff0c\u8fd8\u662f\u4e0d\u53ef\u7f16\u8bd1\uff0c\u539f\u56e0\u4ea6\u663e\u7136\u3002", 
            "title": "\u8f6c\u5316"
        }, 
        {
            "location": "/python_\u7f29\u8fdb/#_4", 
            "text": "\u7efc\u4e0a\uff0c\u5f71\u54cd\u4ee3\u7801\u6700\u5173\u952e\u7684\u56e0\u7d20\u4e3a\u7f16\u8f91\u5668\u5bf9\u81ea\u52a8\u7f29\u8fdb\u548c\u5236\u8868\u7b26\u7684\u89e3\u8bfb\u4e0d\u540c\uff0c\u89e3\u51b3\u529e\u6cd5\u662f\u5c06notepad++\u7684\u81ea\u52a8\u7f29\u8fdb\u548c\u5236\u8868\u7b26\u5747\u8bbe\u7f6e\u6210\u56db\u4e2a\u7a7a\u683c\uff0c\u5177\u4f53\u53c2\u89c1 Notepad++\u7f16\u8f91Pyhton\u6587\u4ef6\u7684\u81ea\u52a8\u7f29\u8fdb\u7684\u95ee\u9898\uff08\u56fe\u6587\uff09\u66f4\u65b0\u5230v6.7.9.2 \u3002", 
            "title": "\u7ed3\u679c"
        }, 
        {
            "location": "/python_\u7f16\u7801/", 
            "text": "\ufeff\u5177\u4f53\u53ef\u53c2\u89c1\n\n\n\n\nPython\u7f16\u7801\u4e3a\u4ec0\u4e48\u90a3\u4e48\u86cb\u75bc\n\n\nPython\u4e2d\u6587\u5904\u7406\u7cfb\u5217\u4e4b\u6e90\u4ee3\u7801\u4e0e\u6587\u4ef6IO\n\n\n\n\n\u5b57\u7b26\u96c6\u4e0e\u7f16\u7801\n\n\n\u5b57\u7b26\u96c6\u6709\n\n\n\n\n26\u4e2a\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u300110\u4e2a\u6570\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u3001\u63a7\u5236\u7b26\n\n\nGB-18030\uff0cGB-2312\uff1a\u4e2d\u56fd\u56fd\u5bb6\u6807\u51c6\uff0c\u524d\u8005\u662f\u540e\u8005\u7684\u6269\u5c55\n\n\nGBK\uff1a\u4e2d\u56fd\u5168\u56fd\u4fe1\u606f\u6280\u672f\u6807\u51c6\u5316\u6280\u672f\u59d4\u5458\u4f1a\u53d1\u5e03\u7684\u6587\u4ef6\uff0c\u662fGB-2312\u7684\u6269\u5c55\uff0c\u517c\u5bb9\u7b2c\u4e00\u9879\n\n\nUnicode\uff1a\u56fd\u9645\u6807\u51c6\uff0c\u89c4\u5b9a\u4e8e ISO/IEC 10646\n\n\nGB-13000\uff1a\u4e2d\u56fd\u56fd\u5bb6\u6807\u51c6\uff0c\u4e3aUnicode\u7684\u5b50\u96c6\n\n\n\n\n\u7f16\u7801\u6709\n\n\n\n\nASCII\n\n\nGB-18030\uff0cGBK\uff0cGB-2312\uff1a\u4e8b\u5b9e\u4e0a\u91c7\u7528EUC-CN\n\n\nUnicode\uff0cGB-13000\uff1a\u91c7\u7528\u591a\u79cd\u7f16\u7801\u65b9\u6848\uff0c\u5e38\u7528\u7684\u6709UTF-8\uff0cUTF-16\u7b49\uff1b\u8fd9\u5176\u4e2d\uff0cUTF-8\u7531\u4e8e\u5bf9ASCII\u826f\u597d\u7684\u517c\u5bb9\u6027\uff0c\u5e7f\u6cdb\u7528\u4e8e\u7a0b\u5e8f\u4ee3\u7801\u3001\u7f51\u9875\u8bbe\u8ba1\u7b49\u4e2d\u82f1\u6df7\u5408\u7684\u573a\u5408\n\n\n\n\n\u6587\u4ef6\u7684\u7f16\u7801\n\n\n     \u7f16\u7801       \u89e3\u7801\n\u6587\u4ef6 ----\n \u5185\u5b58 ----\n \u6587\u4ef6\n\n\n\n\n\n\n\u8bb0\u4e8b\u672c\uff1a\u5728\u53e6\u5b58\u4e3a\u65f6\u53ef\u4ee5\u9009\u62e9\n\n\nNotepad++\uff1a\u5728\u683c\u5f0f\u4e2d\u53ef\u4ee5\u9009\u62e9\n\n\n\n\npython\u7684\u7f16\u7801\n\n\nbasestring\u5b50\u7c7b\uff1astr\u7c7b\u548cunicode\u7c7b\nstr\u7c7b\uff1aprint\u4f7f\u7528str\uff0c\u4ea4\u4e92\u4f7f\u7528repr\nunicode\u7c7b\uff1aprint\u4f7f\u7528unicode\uff0c\u4ea4\u4e92\u4f7f\u7528repr\n\n          \u7f16\u7801        \u89e3\u7801\nunicode\u7c7b ----\n str\u7c7b ----\n unicode\u7c7b\n\n\n\n\n\n\nidle\uff1a\u9ed8\u8ba4\u73af\u5883ascii\uff08sys.getdefaultencoding\uff09\uff0c\u9700\u8981\u6dfb\u52a0#coding=utf-8\uff08PEP 263\uff09\n\n\ncommand line\uff1a\u9ed8\u8ba4\u73af\u5883ANSI\uff08sys.getdefaultencoding\uff09\n\n\n\n\n#coding=utf-8\n\na = '\u4f60\u597d'\nprint a\na = u'\u4f60\u597d'\nprint a\n\n\n\n\n#coding=gbk\n\na = '\u4f60\u597d'\nprint a\na = u'\u4f60\u597d'\nprint a\n\n\n\n\n\n\n\u975e\u56fd\u9645\u5b57\u7b26\uff1a\u65e0\u9700\u52a0u\n\n\n\u56fd\u9645\u5b57\u7b26\uff1a\u52a0#coding=utf-8\uff0c\u52a0u\n\n\n\n\n\u5199\u6587\u4ef6\n\n\n#coding=utf-8\n\na = '\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)\n\n\n\n\n#coding=utf-8\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)\n\n\n\n\n#coding=gbk\n\na = '\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)\n\n\n\n\n#coding=gbk\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)\n\n\n\n\n\u7531\u4e8e\u6587\u4ef6\u7684\u5199\u5165\u5fc5\u987b\u4f7f\u7528str\u7c7b\uff0c\u56e0\u6b64unicode\u5fc5\u987b\u5148\u7f16\u7801\uff0c\u518d\u5199\u5165\uff0c\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u4e00\u4e9b\u65b9\u6cd5\uff1a\n\n\n#coding=utf-8\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a.encode('utf-8'))\n\n\n\n\n#coding=utf-8\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a.encode('gbk'))\n\n\n\n\n#coding=utf-8\nimport codecs\n\na = u'\u4f60\u597d'\nwith open('test.txt', encoding='utf-8', mode='w') as f:\n    f.write(a)\n\n\n\n\n#coding=utf-8\nimport codecs\n\na = u'\u4f60\u597d'\nwith open('test.txt', encoding='gbk', mode='w') as f:\n    f.write(a)\n\n\n\n\n\u8bfb\u6587\u4ef6\n\n\n\u548c\u5199\u6587\u4ef6\u4e00\u6837\uff0cpython\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3astr\u7c7b\uff0c\u8981\u60f3\u8f6c\u5316\u6210unicode\u7c7b\uff0c\u5fc5\u987b\u4e8b\u5148\u77e5\u9053\u6587\u4ef6\u7684\u7f16\u7801\uff1autf-8\u5bf9\u5e94\u7684\u662futf-8\uff0cANSI\u5bf9\u5e94\u7684\u662fgbk\n\n\n\u8bfb\u7f51\u9875\n\n\n\u548c\u8bfb\u6587\u4ef6\u4e0d\u4e00\u6837\uff0cpython\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3aunicode\u7c7b\uff0c\u8981\u60f3\u8f6c\u5316\u4e3astr\u7c7b\uff0c\u53ef\u4ee5\u67e5\u770bresponse.encoding", 
            "title": "\u7f16\u7801"
        }, 
        {
            "location": "/python_\u7f16\u7801/#_1", 
            "text": "\u5b57\u7b26\u96c6\u6709   26\u4e2a\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u300110\u4e2a\u6570\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u3001\u63a7\u5236\u7b26  GB-18030\uff0cGB-2312\uff1a\u4e2d\u56fd\u56fd\u5bb6\u6807\u51c6\uff0c\u524d\u8005\u662f\u540e\u8005\u7684\u6269\u5c55  GBK\uff1a\u4e2d\u56fd\u5168\u56fd\u4fe1\u606f\u6280\u672f\u6807\u51c6\u5316\u6280\u672f\u59d4\u5458\u4f1a\u53d1\u5e03\u7684\u6587\u4ef6\uff0c\u662fGB-2312\u7684\u6269\u5c55\uff0c\u517c\u5bb9\u7b2c\u4e00\u9879  Unicode\uff1a\u56fd\u9645\u6807\u51c6\uff0c\u89c4\u5b9a\u4e8e ISO/IEC 10646  GB-13000\uff1a\u4e2d\u56fd\u56fd\u5bb6\u6807\u51c6\uff0c\u4e3aUnicode\u7684\u5b50\u96c6   \u7f16\u7801\u6709   ASCII  GB-18030\uff0cGBK\uff0cGB-2312\uff1a\u4e8b\u5b9e\u4e0a\u91c7\u7528EUC-CN  Unicode\uff0cGB-13000\uff1a\u91c7\u7528\u591a\u79cd\u7f16\u7801\u65b9\u6848\uff0c\u5e38\u7528\u7684\u6709UTF-8\uff0cUTF-16\u7b49\uff1b\u8fd9\u5176\u4e2d\uff0cUTF-8\u7531\u4e8e\u5bf9ASCII\u826f\u597d\u7684\u517c\u5bb9\u6027\uff0c\u5e7f\u6cdb\u7528\u4e8e\u7a0b\u5e8f\u4ee3\u7801\u3001\u7f51\u9875\u8bbe\u8ba1\u7b49\u4e2d\u82f1\u6df7\u5408\u7684\u573a\u5408", 
            "title": "\u5b57\u7b26\u96c6\u4e0e\u7f16\u7801"
        }, 
        {
            "location": "/python_\u7f16\u7801/#_2", 
            "text": "\u7f16\u7801       \u89e3\u7801\n\u6587\u4ef6 ----  \u5185\u5b58 ----  \u6587\u4ef6   \u8bb0\u4e8b\u672c\uff1a\u5728\u53e6\u5b58\u4e3a\u65f6\u53ef\u4ee5\u9009\u62e9  Notepad++\uff1a\u5728\u683c\u5f0f\u4e2d\u53ef\u4ee5\u9009\u62e9", 
            "title": "\u6587\u4ef6\u7684\u7f16\u7801"
        }, 
        {
            "location": "/python_\u7f16\u7801/#python", 
            "text": "basestring\u5b50\u7c7b\uff1astr\u7c7b\u548cunicode\u7c7b\nstr\u7c7b\uff1aprint\u4f7f\u7528str\uff0c\u4ea4\u4e92\u4f7f\u7528repr\nunicode\u7c7b\uff1aprint\u4f7f\u7528unicode\uff0c\u4ea4\u4e92\u4f7f\u7528repr\n\n          \u7f16\u7801        \u89e3\u7801\nunicode\u7c7b ----  str\u7c7b ----  unicode\u7c7b   idle\uff1a\u9ed8\u8ba4\u73af\u5883ascii\uff08sys.getdefaultencoding\uff09\uff0c\u9700\u8981\u6dfb\u52a0#coding=utf-8\uff08PEP 263\uff09  command line\uff1a\u9ed8\u8ba4\u73af\u5883ANSI\uff08sys.getdefaultencoding\uff09   #coding=utf-8\n\na = '\u4f60\u597d'\nprint a\na = u'\u4f60\u597d'\nprint a  #coding=gbk\n\na = '\u4f60\u597d'\nprint a\na = u'\u4f60\u597d'\nprint a   \u975e\u56fd\u9645\u5b57\u7b26\uff1a\u65e0\u9700\u52a0u  \u56fd\u9645\u5b57\u7b26\uff1a\u52a0#coding=utf-8\uff0c\u52a0u", 
            "title": "python\u7684\u7f16\u7801"
        }, 
        {
            "location": "/python_\u7f16\u7801/#_3", 
            "text": "#coding=utf-8\n\na = '\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)  #coding=utf-8\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)  #coding=gbk\n\na = '\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)  #coding=gbk\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a)  \u7531\u4e8e\u6587\u4ef6\u7684\u5199\u5165\u5fc5\u987b\u4f7f\u7528str\u7c7b\uff0c\u56e0\u6b64unicode\u5fc5\u987b\u5148\u7f16\u7801\uff0c\u518d\u5199\u5165\uff0c\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u4e00\u4e9b\u65b9\u6cd5\uff1a  #coding=utf-8\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a.encode('utf-8'))  #coding=utf-8\n\na = u'\u4f60\u597d'\nwith open('test.txt', 'w') as f:\n    f.write(a.encode('gbk'))  #coding=utf-8\nimport codecs\n\na = u'\u4f60\u597d'\nwith open('test.txt', encoding='utf-8', mode='w') as f:\n    f.write(a)  #coding=utf-8\nimport codecs\n\na = u'\u4f60\u597d'\nwith open('test.txt', encoding='gbk', mode='w') as f:\n    f.write(a)", 
            "title": "\u5199\u6587\u4ef6"
        }, 
        {
            "location": "/python_\u7f16\u7801/#_4", 
            "text": "\u548c\u5199\u6587\u4ef6\u4e00\u6837\uff0cpython\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3astr\u7c7b\uff0c\u8981\u60f3\u8f6c\u5316\u6210unicode\u7c7b\uff0c\u5fc5\u987b\u4e8b\u5148\u77e5\u9053\u6587\u4ef6\u7684\u7f16\u7801\uff1autf-8\u5bf9\u5e94\u7684\u662futf-8\uff0cANSI\u5bf9\u5e94\u7684\u662fgbk", 
            "title": "\u8bfb\u6587\u4ef6"
        }, 
        {
            "location": "/python_\u7f16\u7801/#_5", 
            "text": "\u548c\u8bfb\u6587\u4ef6\u4e0d\u4e00\u6837\uff0cpython\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3aunicode\u7c7b\uff0c\u8981\u60f3\u8f6c\u5316\u4e3astr\u7c7b\uff0c\u53ef\u4ee5\u67e5\u770bresponse.encoding", 
            "title": "\u8bfb\u7f51\u9875"
        }, 
        {
            "location": "/python_\u6a21\u5757/", 
            "text": "\ufeff\u4e00\u822c\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\nmycompany\n-- web\n   -- __init__.py\n   -- utils.py\n   -- www.py\n-- __init__.py\n-- abc.py\n-- utils.py\n-- xyz.py\n\n\n\n\n\u4f7f\u7528\u7684\u8bed\u53e5\u4e3a\n\n\nfrom xxx\nimport xxx\nas xxx", 
            "title": "\u6a21\u5757"
        }, 
        {
            "location": "/python_\u5e93/", 
            "text": "\ufeffpython\u5982\u6b64\u53d7\u6b22\u8fce\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u56e0\u662f\u5f3a\u5927\u7684\u7b2c\u4e09\u65b9\u5e93\u652f\u6301\u3002\n\n\n\u7ba1\u7406\n\n\nGithub\u4e0a\u7684\npypa\n\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u5173\u5305\u7684\u6307\u5357\nPython Packaging User Guide\n\u3002\u53e6\u5916\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b98\u7f51\u7684\nPyPI\n\u67e5\u770b\u7b2c\u4e09\u65b9\u5305\u7684\u4fe1\u606f\u3002\u5176\u4e2d\u8bb8\u591a\u5305\u662f\u6258\u7ba1\u5728\nGithub\n\u4e0a\u7684\uff0c\u6bd4\u5982\nKenneth Reitz\n\u4e0b\u7684\u8bb8\u591a\u4ed3\u5e93\u3002\n\n\n\u5305\u7684\u7ba1\u7406\u57fa\u672c\u5206\u4e3a\u4ee5\u4e0b\u516b\u4e2a\u6b65\u9aa4\uff1a\n\n\n\n\n\u6253\u5305\n\n\n\u53d1\u5e03\n\n\n\u4e0b\u8f7d\n\n\n\u5b89\u88c5\n\n\n\u5347\u7ea7\n\n\n\u5378\u8f7d\n\n\n\u67e5\u770b\n\n\n\u4f7f\u7528\n\n\n\n\n\u5de5\u5177\n\n\npython\u6709\u8bb8\u591a\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u5e38\u7528\u7684\u6709distutils\uff0csetuptools\u548cpip\uff0c\u53e6\u5916\nPython\u5305\u7ba1\u7406\u5de5\u5177\u89e3\u60d1\n\u89e3\u91ca\u4e86\u7ba1\u7406\u5de5\u5177\u95f4\u7684\u533a\u522b\u3002\n\n\n\u5b89\u88c5\n\n\n\u5177\u4f53\u53ef\u53c2\u89c1\nwindows\u4e0b\u9762\u5b89\u88c5Python\u548cpip\u7ec8\u6781\u6559\u7a0b\n\u3002\n\n\ndistutils\u548csetuptools\n\n\n\n\n\u6587\u6863\n\n\n\u6587\u6863\n\n\n\u5e38\u7528\u547d\u4ee4\n\n\n\n\n# \u6253\u5305\npython setup.py sdist         # tar.gz\npython setup.py bdist_egg     # egg\npython setup.py bdist_rpm     # rpm\npython setup.py bsist_wininst # exe\n\n# \u5b89\u88c5\npython setup.py install\n\n\n\n\npip\n\n\n\n\n\u6587\u6863\n\n\n\u5e38\u7528\u547d\u4ee4\n\n\n\n\n# \u4e0b\u8f7d\uff0c\u5b89\u88c5\uff0c\u5347\u7ea7\u548c\u5378\u8f7d\npip install requests           # \u4e0b\u8f7d\u548c\u5b89\u88c5\npip install --upgrade requests # \u5347\u7ea7\npip uninstall requests         # \u5378\u8f7d \n\n# \u67e5\u770b\npip list\npip list --outdated\n\n\n\n\n\u6253\u5305\u548c\u53d1\u5e03\n\n\n\u5177\u4f53\u53ef\u53c2\u89c1\u4ee5\u4e0b\u4e09\u7bc7\u6587\u7ae0:\n\n\n\n\n\u5173\u4e8epython\u4e2d\u7684setup.py\n\n\nPython\u5305\u7ba1\u7406\u5de5\u5177\u89e3\u60d1\n\n\n\u5c06\u81ea\u5df1\u5199\u7684Python\u4ee3\u7801\u6253\u5305\u653e\u5230PyPI\u4e0a\n\n\n\n\n\u4e0b\u8f7d\uff0c\u5b89\u88c5\uff0c\u5347\u7ea7\u548c\u5378\u8f7d\n\n\n\u7531\u4e8eWindows\u7528\u6237\u5728\u4f7f\u7528python\u65f6\uff0c\u53ef\u80fd\u4f1a\u56e0Windows\u7684\u7279\u6709\u5c5e\u6027\uff08C/C++\uff09\u5bfc\u81f4\u5305\u7684\u5b89\u88c5\u5931\u8d25\uff0c\u56e0\u6b64\u53ef\u53c2\u8003\u4e0b\u5217\u8d44\u6e90\uff1a\n\n\n\n\nMicrosoft Visual C++ Compiler for Python 2.7\n\uff1apython\u7684cl\u7f16\u8bd1\u5668\n\n\nPython for Windows Extensions\n\uff1apython\u5728Windows\u4e0b\u7684\u7cfb\u7edf\u7f16\u7a0b\n\n\nUnofficial Windows Binaries for Python Extension Packages\n\uff1a\u4e00\u4e9b\u96c6\u6210\u597d\u7684wheel", 
            "title": "\u5e93"
        }, 
        {
            "location": "/python_\u5e93/#_1", 
            "text": "Github\u4e0a\u7684 pypa \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u5173\u5305\u7684\u6307\u5357 Python Packaging User Guide \u3002\u53e6\u5916\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b98\u7f51\u7684 PyPI \u67e5\u770b\u7b2c\u4e09\u65b9\u5305\u7684\u4fe1\u606f\u3002\u5176\u4e2d\u8bb8\u591a\u5305\u662f\u6258\u7ba1\u5728 Github \u4e0a\u7684\uff0c\u6bd4\u5982 Kenneth Reitz \u4e0b\u7684\u8bb8\u591a\u4ed3\u5e93\u3002  \u5305\u7684\u7ba1\u7406\u57fa\u672c\u5206\u4e3a\u4ee5\u4e0b\u516b\u4e2a\u6b65\u9aa4\uff1a   \u6253\u5305  \u53d1\u5e03  \u4e0b\u8f7d  \u5b89\u88c5  \u5347\u7ea7  \u5378\u8f7d  \u67e5\u770b  \u4f7f\u7528", 
            "title": "\u7ba1\u7406"
        }, 
        {
            "location": "/python_\u5e93/#_2", 
            "text": "python\u6709\u8bb8\u591a\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u5e38\u7528\u7684\u6709distutils\uff0csetuptools\u548cpip\uff0c\u53e6\u5916 Python\u5305\u7ba1\u7406\u5de5\u5177\u89e3\u60d1 \u89e3\u91ca\u4e86\u7ba1\u7406\u5de5\u5177\u95f4\u7684\u533a\u522b\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/python_\u5e93/#_3", 
            "text": "\u5177\u4f53\u53ef\u53c2\u89c1 windows\u4e0b\u9762\u5b89\u88c5Python\u548cpip\u7ec8\u6781\u6559\u7a0b \u3002", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/python_\u5e93/#distutilssetuptools", 
            "text": "\u6587\u6863  \u6587\u6863  \u5e38\u7528\u547d\u4ee4   # \u6253\u5305\npython setup.py sdist         # tar.gz\npython setup.py bdist_egg     # egg\npython setup.py bdist_rpm     # rpm\npython setup.py bsist_wininst # exe\n\n# \u5b89\u88c5\npython setup.py install", 
            "title": "distutils\u548csetuptools"
        }, 
        {
            "location": "/python_\u5e93/#pip", 
            "text": "\u6587\u6863  \u5e38\u7528\u547d\u4ee4   # \u4e0b\u8f7d\uff0c\u5b89\u88c5\uff0c\u5347\u7ea7\u548c\u5378\u8f7d\npip install requests           # \u4e0b\u8f7d\u548c\u5b89\u88c5\npip install --upgrade requests # \u5347\u7ea7\npip uninstall requests         # \u5378\u8f7d \n\n# \u67e5\u770b\npip list\npip list --outdated", 
            "title": "pip"
        }, 
        {
            "location": "/python_\u5e93/#_4", 
            "text": "\u5177\u4f53\u53ef\u53c2\u89c1\u4ee5\u4e0b\u4e09\u7bc7\u6587\u7ae0:   \u5173\u4e8epython\u4e2d\u7684setup.py  Python\u5305\u7ba1\u7406\u5de5\u5177\u89e3\u60d1  \u5c06\u81ea\u5df1\u5199\u7684Python\u4ee3\u7801\u6253\u5305\u653e\u5230PyPI\u4e0a", 
            "title": "\u6253\u5305\u548c\u53d1\u5e03"
        }, 
        {
            "location": "/python_\u5e93/#_5", 
            "text": "\u7531\u4e8eWindows\u7528\u6237\u5728\u4f7f\u7528python\u65f6\uff0c\u53ef\u80fd\u4f1a\u56e0Windows\u7684\u7279\u6709\u5c5e\u6027\uff08C/C++\uff09\u5bfc\u81f4\u5305\u7684\u5b89\u88c5\u5931\u8d25\uff0c\u56e0\u6b64\u53ef\u53c2\u8003\u4e0b\u5217\u8d44\u6e90\uff1a   Microsoft Visual C++ Compiler for Python 2.7 \uff1apython\u7684cl\u7f16\u8bd1\u5668  Python for Windows Extensions \uff1apython\u5728Windows\u4e0b\u7684\u7cfb\u7edf\u7f16\u7a0b  Unofficial Windows Binaries for Python Extension Packages \uff1a\u4e00\u4e9b\u96c6\u6210\u597d\u7684wheel", 
            "title": "\u4e0b\u8f7d\uff0c\u5b89\u88c5\uff0c\u5347\u7ea7\u548c\u5378\u8f7d"
        }, 
        {
            "location": "/python_\u8c03\u8bd5/", 
            "text": "\ufeffpython\u8c03\u8bd5\u65b9\u6cd5\u5206\u4e3a\u4e09\u79cd\uff1a\n\n\n\n\n\u4f7f\u7528print\uff0cassert\n\n\n\u4f7f\u7528\u6a21\u5757logging\uff0cpdb\n\n\n\u57fa\u4e8e\u7f16\u8f91\u5668\uff0c\u5982PyCharm\n\n\n\n\n\u5177\u4f53\u65b9\u6cd5\u53ef\u53c2\u89c1\uff1a\n\n\n\n\nPython \u7a0b\u5e8f\u5982\u4f55\u9ad8\u6548\u5730\u8c03\u8bd5\n\n\nPython \u4ee3\u7801\u8c03\u8bd5\u6280\u5de7", 
            "title": "\u8c03\u8bd5"
        }, 
        {
            "location": "/python_\u6d4b\u8bd5/", 
            "text": "\ufeffpython\u6d4b\u8bd5\u65b9\u6cd5\u5206\u4e3a\u4e24\u79cd\uff1a\n\n\n\n\n\u5355\u5143\u6d4b\u8bd5\n\n\n\u6587\u6863\u6d4b\u8bd5\n\n\n\n\n\u5177\u4f53\u65b9\u6cd5\u53ef\u53c2\u89c1\uff1a\n\n\n\n\n\u5355\u5143\u6d4b\u8bd5\n\n\n\u6587\u6863\u6d4b\u8bd5", 
            "title": "\u6d4b\u8bd5"
        }, 
        {
            "location": "/python_c\u548cc++/", 
            "text": "\ufeff\u5177\u4f53\u53ef\u53c2\u89c1\n\n\n\n\n\u86c7\u4e4b\u9b45\u60d1\n\n\n\u5982\u4f55\u5b9e\u73b0 C/C++ \u4e0e Python \u7684\u901a\u4fe1", 
            "title": "c\u548cc++"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/", 
            "text": "\ufeff\u6574\u7406\u4e86\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54\u3002\n\n\n\n\nPython\u5f00\u53d1\u4e2d\u6709\u54ea\u4e9b\u9ad8\u7ea7\u6280\u5de7\n\n\nPython\u6709\u54ea\u4e9b\u4f18\u96c5\u7684\u4ee3\u7801\u5b9e\u73b0\n\n\n\n\n\u76f4\u5230\u627e\u5230\u7b26\u5408\u7684\u7ed3\u679c\n\n\nBad:\n\n\na = -1\nfor i in range(1, 10):\n    if not i % 4:\n        a = i\n        break\n\n\n\n\nGood:\n\n\na = next((i for i in range(1, 10) if not i % 4), -1)\n\n\n\n\n\u76f4\u5230\u51fa\u73b0\u4e0d\u7b26\u5408\u7684\u7ed3\u679c\n\n\nBad:\n\n\nblocks = []\nwhile True:\n    block = f.read(32)\n    if block == '':\n        break\n    blocks.append(block)\n\n\n\n\nGood:\n\n\nfrom functools import partial\n\nblocks = []\nfor block in iter(partial(f.read, 32), ''):\n    blocks.append(block)\n\n\n\n\n\u6807\u8bb0\u533a\u5206\n\n\nBad:\n\n\ndef prime(n):\n    for i in range(2, n-1):\n        if n % i == 0:\n            return i\n    return -1\n\n\n\n\nGood:\n\n\ndef prime(n):\n    for i in range(2, n-1):\n        if n % i == 0:\n            break\n    else:\n        return -1\n    return i\n\n\n\n\n\u5b57\u5178\n\n\nBad:\n\n\nt = {}\nt['a'] = {}\nt['a']['b'] = 1 \nt['c'] = 1\nt['d'] = {}\nt['d']['e'] = {}\nt['d']['e']['f'] = 10\n\n\n\n\nGood:\n\n\nfrom collections import defaultdict\n\ntree = lambda: defaultdict(tree)\nt = tree()\nt['a']['b'] = 1\nt['c'] = 1\nt['d']['e']['f'] = 10\n\n\n\n\n\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n\n\n\u6587\u4ef6\n\n\nBad:\n\n\nf = open('tmp/a', 'a')\nf.write('hello world')\nf.close()\n\n\n\n\nGood:\n\n\nwith open('/tmp/a', 'a') as f:\n    f.write('hello world')\n\n\n\n\nBad:\n\n\nclass OpenContext(object):\n    def __init__(self, filename, mode):\n        self.fp = open(filename, mode)\n\n    def __enter__(self):\n        return self.fp\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.fp.close()\n\nwith OpenContext('/tmp/a', 'a') as f:\n    f.write('hello world')\n\n\n\n\nGood:\n\n\nfrom contextlib import contextmanager\n\n@contextmanager\ndef make_open_context(filename, mode):\n    fp = open(filename, mode)\n    try:\n        yield fp\n    finally:\n        fp.close()\n\nwith make_open_context('/tmp/a', 'a') as f:\n    f.write('hello world')\n\n\n\n\n\u9501\n\n\nBad:\n\n\nimport threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    lock.acquire()\n    print 'Staring', threadName\n    lock.release()\n    while counter:\n        time.sleep(delay)\n        lock.acquire()\n        print '%s: %s' % (threadName, time.ctime(time.time()))\n        lock.release()\n        counter -= 1\n    lock.acquire()\n    print 'Exiting', threadName\n    lock.release()\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'\n\n\n\n\nGood:\n\n\nimport threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    with lock:\n        print 'Staring', threadName\n    while counter:\n        time.sleep(delay)\n        with lock:\n            print '%s: %s' % (threadName, time.ctime(time.time()))\n        counter -= 1\n    with lock:\n        print 'Exiting', threadName\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'\n\n\n\n\n\u5f02\u5e38\n\n\nBad:\n\n\nimport os\n\ntry:\n    os.remove('somefile.tmp')\nexcept OSError:\n    print 'no file'\n\n\n\n\nGood:\n\n\nimport os\nfrom contextlib import contextmanager\n\n@contextmanager\ndef ignored(*exceptions):\n    try:\n        yield\n    except exceptions:\n        print 'no file'\n\nwith ignored(OSError):\n    os.remove('somefile.tmp')\n\n\n\n\n\u7f13\u5b58\n\n\nBad:\n\n\nimport requests\n\ndef web_lookup(url, saved={}):\n    if url in saved:\n        return saved[url]\n    page = requests.get(url)\n    saved[url] = page\n    return page\n\n\n\n\nBetter:\n\n\nimport requests\n\ndef cache(func):\n    saved = {}\n    @wraps(func)\n    def newfunc(*args):\n        if args in saved:\n            return saved[args]\n        result = func(*args)\n        saved[args] = result\n        return result\n    return newfunc\n\n@cache\ndef web_lookup(url):\n    return requests.get(url)\n\n\n\n\nGood:\n\n\nclass cached_property(property):\n    def __init__(self, func, name=None, doc=None):\n        self.__name__ = name or func.__name__\n        self.__module__ = func.__module__\n        self.__doc__ = doc or func.__doc__\n        self.func = func\n\n    def __set__(self, obj, value):\n        obj.__dict__[self.__name__] = value\n\n    def __get__(self, obj, type=None):\n        if obj is None:\n            return self\n        value = obj.__dict__.get(self.__name__, _missing)\n        if value is _missing:\n            value = self.func(obj)\n            obj.__dict__[self.__name__] = value\n        return value\n\n\n\n\ntotal_ordering\n\n\nfrom functools import total_ordering\n\n@total_ordering\nclass Size(object):\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value \n other.value\n\n    def __eq__(self, other):\n        return self.value == other.value\n\n\n\n\ninspect\n\n\nimport inspect\n\ndef add(a, b=1):\n    return a + b\n\nprint inspect.getsourcelines(add)\nprint inspect.getargspec(add)\nprint inspect.getcallargs(add, 10, 2)\nprint inspect.isclass(add)\nprint inspect.isfunction(add)\n\n\n\n\nmixin\n\n\n\u5177\u4f53\u53ef\u53c2\u89c1\nPython mixin\u6a21\u5f0f\n\u3002\n\n\nfrom UserDict import DictMixin\n\nclass MyDict(DictMixin):\n    def __init__(self, dict=None, **kwargs):\n        self.data = {}\n        if dict is not None:\n            self.update(dict)\n        if len(kwargs):\n            self.update(kwargs)\n\n    def __getitem__(self, id):\n        return self.data[id]\n\n    def __setitem__(self, id, value):\n        self.data[id] = value\n\n    def __delitem__(self, id):\n        del self.data[id]\n\n    def keys(self):\n        return self.data.keys()\n\n\n\n\nfrom UserDict import DictMixin\n\nclass Item(DictMixin):\n    def __init__(self):\n        self.data = {}\n\n    def __getitem__(self, id):\n        return self.data[id]\n\n    def __setitem__(self, id, value):\n        self.data[id] = value\n\n    def __delitem__(self, id):\n        del self.data[id]\n\n    def keys(self):\n        return self.data.keys()\n\n\n\n\nclass CommonEqualityMixin(object):\n    def __eq__(self, other):\n        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\nclass Foo(CommonEqualityMixin):\n    def __init__(self, item):\n        self.item = item", 
            "title": "\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_1", 
            "text": "Bad:  a = -1\nfor i in range(1, 10):\n    if not i % 4:\n        a = i\n        break  Good:  a = next((i for i in range(1, 10) if not i % 4), -1)", 
            "title": "\u76f4\u5230\u627e\u5230\u7b26\u5408\u7684\u7ed3\u679c"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_2", 
            "text": "Bad:  blocks = []\nwhile True:\n    block = f.read(32)\n    if block == '':\n        break\n    blocks.append(block)  Good:  from functools import partial\n\nblocks = []\nfor block in iter(partial(f.read, 32), ''):\n    blocks.append(block)", 
            "title": "\u76f4\u5230\u51fa\u73b0\u4e0d\u7b26\u5408\u7684\u7ed3\u679c"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_3", 
            "text": "Bad:  def prime(n):\n    for i in range(2, n-1):\n        if n % i == 0:\n            return i\n    return -1  Good:  def prime(n):\n    for i in range(2, n-1):\n        if n % i == 0:\n            break\n    else:\n        return -1\n    return i", 
            "title": "\u6807\u8bb0\u533a\u5206"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_4", 
            "text": "Bad:  t = {}\nt['a'] = {}\nt['a']['b'] = 1 \nt['c'] = 1\nt['d'] = {}\nt['d']['e'] = {}\nt['d']['e']['f'] = 10  Good:  from collections import defaultdict\n\ntree = lambda: defaultdict(tree)\nt = tree()\nt['a']['b'] = 1\nt['c'] = 1\nt['d']['e']['f'] = 10", 
            "title": "\u5b57\u5178"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_5", 
            "text": "", 
            "title": "\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_6", 
            "text": "Bad:  f = open('tmp/a', 'a')\nf.write('hello world')\nf.close()  Good:  with open('/tmp/a', 'a') as f:\n    f.write('hello world')  Bad:  class OpenContext(object):\n    def __init__(self, filename, mode):\n        self.fp = open(filename, mode)\n\n    def __enter__(self):\n        return self.fp\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.fp.close()\n\nwith OpenContext('/tmp/a', 'a') as f:\n    f.write('hello world')  Good:  from contextlib import contextmanager\n\n@contextmanager\ndef make_open_context(filename, mode):\n    fp = open(filename, mode)\n    try:\n        yield fp\n    finally:\n        fp.close()\n\nwith make_open_context('/tmp/a', 'a') as f:\n    f.write('hello world')", 
            "title": "\u6587\u4ef6"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_7", 
            "text": "Bad:  import threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    lock.acquire()\n    print 'Staring', threadName\n    lock.release()\n    while counter:\n        time.sleep(delay)\n        lock.acquire()\n        print '%s: %s' % (threadName, time.ctime(time.time()))\n        lock.release()\n        counter -= 1\n    lock.acquire()\n    print 'Exiting', threadName\n    lock.release()\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'  Good:  import threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    with lock:\n        print 'Staring', threadName\n    while counter:\n        time.sleep(delay)\n        with lock:\n            print '%s: %s' % (threadName, time.ctime(time.time()))\n        counter -= 1\n    with lock:\n        print 'Exiting', threadName\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'", 
            "title": "\u9501"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_8", 
            "text": "Bad:  import os\n\ntry:\n    os.remove('somefile.tmp')\nexcept OSError:\n    print 'no file'  Good:  import os\nfrom contextlib import contextmanager\n\n@contextmanager\ndef ignored(*exceptions):\n    try:\n        yield\n    except exceptions:\n        print 'no file'\n\nwith ignored(OSError):\n    os.remove('somefile.tmp')", 
            "title": "\u5f02\u5e38"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#_9", 
            "text": "Bad:  import requests\n\ndef web_lookup(url, saved={}):\n    if url in saved:\n        return saved[url]\n    page = requests.get(url)\n    saved[url] = page\n    return page  Better:  import requests\n\ndef cache(func):\n    saved = {}\n    @wraps(func)\n    def newfunc(*args):\n        if args in saved:\n            return saved[args]\n        result = func(*args)\n        saved[args] = result\n        return result\n    return newfunc\n\n@cache\ndef web_lookup(url):\n    return requests.get(url)  Good:  class cached_property(property):\n    def __init__(self, func, name=None, doc=None):\n        self.__name__ = name or func.__name__\n        self.__module__ = func.__module__\n        self.__doc__ = doc or func.__doc__\n        self.func = func\n\n    def __set__(self, obj, value):\n        obj.__dict__[self.__name__] = value\n\n    def __get__(self, obj, type=None):\n        if obj is None:\n            return self\n        value = obj.__dict__.get(self.__name__, _missing)\n        if value is _missing:\n            value = self.func(obj)\n            obj.__dict__[self.__name__] = value\n        return value", 
            "title": "\u7f13\u5b58"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#total_ordering", 
            "text": "from functools import total_ordering\n\n@total_ordering\nclass Size(object):\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value   other.value\n\n    def __eq__(self, other):\n        return self.value == other.value", 
            "title": "total_ordering"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#inspect", 
            "text": "import inspect\n\ndef add(a, b=1):\n    return a + b\n\nprint inspect.getsourcelines(add)\nprint inspect.getargspec(add)\nprint inspect.getcallargs(add, 10, 2)\nprint inspect.isclass(add)\nprint inspect.isfunction(add)", 
            "title": "inspect"
        }, 
        {
            "location": "/python_\u8463\u4f1f\u660e\u7684\u77e5\u4e4e\u56de\u7b54/#mixin", 
            "text": "\u5177\u4f53\u53ef\u53c2\u89c1 Python mixin\u6a21\u5f0f \u3002  from UserDict import DictMixin\n\nclass MyDict(DictMixin):\n    def __init__(self, dict=None, **kwargs):\n        self.data = {}\n        if dict is not None:\n            self.update(dict)\n        if len(kwargs):\n            self.update(kwargs)\n\n    def __getitem__(self, id):\n        return self.data[id]\n\n    def __setitem__(self, id, value):\n        self.data[id] = value\n\n    def __delitem__(self, id):\n        del self.data[id]\n\n    def keys(self):\n        return self.data.keys()  from UserDict import DictMixin\n\nclass Item(DictMixin):\n    def __init__(self):\n        self.data = {}\n\n    def __getitem__(self, id):\n        return self.data[id]\n\n    def __setitem__(self, id, value):\n        self.data[id] = value\n\n    def __delitem__(self, id):\n        del self.data[id]\n\n    def keys(self):\n        return self.data.keys()  class CommonEqualityMixin(object):\n    def __eq__(self, other):\n        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\nclass Foo(CommonEqualityMixin):\n    def __init__(self, item):\n        self.item = item", 
            "title": "mixin"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/", 
            "text": "\ufeff\u6574\u7406\u4e86\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54\u3002\n\n\n\n\n\u600e\u4e48\u6837\u624d\u7b97\u662f\u7cbe\u901aPython\n\n\n\u600e\u6837\u624d\u80fd\u5199\u51fapythonic\u7684\u4ee3\u7801\n\n\nPython\u6709\u54ea\u4e9b\u4f18\u96c5\u7684\u4ee3\u7801\u5b9e\u73b0\n\n\n\n\npython\u4e4b\u7985\n\n\n import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\n\n\n\u5207\u7247\n\n\n\u5207\u7247\u64cd\u4f5c\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u6b65\u957f\u3002\n\n\n L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n L[2:-2]\n[3, 4, 5, 6, 7]\n\n L[-2:2] # \u8868\u793aL[-2:2:1]\n[]\n\n L[-2:2:-1]\n[8, 7, 6, 5, 4]\n\n\n\n\n\u5217\u8868\u63a8\u5bfc\u5f0f\n\n\n [i*i for i in range(1, 21) if i% 2 == 0]\n[4, 16, 36, 64, 100, 144, 196, 256, 324, 400] # \u5217\u8868\n\n {i*i for i in range(1, 21) if i% 2 == 0}\nset([64, 144, 36, 100, 324, 256, 16, 400, 196, 4]) # \u96c6\u5408\n\n {i:i*i for i in range(1, 21) if i% 2 == 0}\n{2: 4, 4: 16, 6: 36, 8: 64, 10: 100, 12: 144, 14: 196, 16: 256, 18: 324, 20: 400} # \u5b57\u5178\n\n\n [item for item in os.listdir(os.path.expanduser('.')) if os.path.isfile(item)]\n\n [item for item in os.listdir(os.path.expanduser('.')) if os.path.isdir(item)]\n\n {item: os.path.realpath(item) for item in os.listdir(os.path.expanduser('.'))}\n\n\n\n\n\u6570\u636e\u7ed3\u6784\n\n\n\u5143\u7ec4\n\n\nfrom collections import namedtuple\n\nDiskDevice = namedtuple('DiskDevice', ['major_number minor_number device_name read_count read_merged_count',\n                                       'read_sections time_spent_reading write_count write_merged_count ',\n                                       'write_sections time_spent_write io_requests time_spent_doing_io',\n                                       ' weighted_time_spent_doing_io'])\n\ndef get_disk_info(disk_name):\n    with open('/proc/diskstats') as f:\n        for line in f:\n            if line.split()[2] == disk_name:\n                return DiskDevice(*(line.split()))\n\n\n\n\n\u5b57\u5178\n\n\nBad:\n\n\nport = kwargs.get('port')\nif port is None:\n    port = 3306\n\n\n\n\nGood:\n\n\nport = kwargs.get('port', 3306)\n\n\n\n\nBad:\n\n\nd = {}\nfor key, value in pairs:\n    if key not in d:\n        d[key] = []\n    d[key].append(value)\n\n\n\n\nGood:\n\n\nfrom collections import defaultdict\n\nd = defaultdict(list)\nfor key, value in pairs:\n    d[key].append(value)\n\n\n\n\nBad:\n\n\nd = {}\nwith open('/etc/passwd') as f:\n    for line in f:\n        for word in line.strip().split(':'):\n            if word not in d:\n                d[word] = 0\n            d[word] += 1\n\n\n\n\nBetter:\n\n\nfrom collections import defaultdict\n\nd = defaultdict(int)\nwith open('/etc/passwd') as f:\n    for line in f:\n        for word in line.strip().split(':'):\n            d[word] += 1\n\n\n\n\nGood:\n\n\nfrom collections import Counter\n\nword_counts = Counter()\nwith open('test.txt') as f:\n    for line in f:\n        word_counts.update(line.strip().split(':'))\n\n\n\n\nBad:\n\n\nresult = sorted(zip(d.values(), d.keys()), reverse=True)[:3]\nfor val, key in result:\n    print  key, ':', val\n\n\n\n\nGood:\n\n\nfor key, val in word_counts.most_common(3):\n    print key, ':', val\n\n\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\n\n\nlist              --- \u6570\u7ec4\uff0c\u5224\u65ad\u5143\u7d20\u6709\u65e0\uff1a\u6162\ncollections.deque --- \u53cc\u5411\u94fe\u8868\nset               --- hash\u8868\uff0c\u5224\u65ad\u5143\u7d20\u6709\u65e0\uff1a\u5feb\n\n\n\n\nelse\n\n\nif xxx:\n    pass\nelse:\n    pass\n\n\n\n\nwhile xxx:\n    pass\nelse:\n    pass\n\n\n\n\ntry:\n    pass\nexcept:\n    pass\nelse:\n    pass\nfinally:\n    pass\n\n\n\n\n\u5185\u7f6e\u51fd\u6570\n\n\n\n\nsum\n\n\nsort\n\n\nmax\n\n\nmin\n\n\nany\n\n\n\n\nany(...)\n    any(iterable) -\n bool\n\n    Return True if bool(x) is True for any x in the iterable.\n    If the iterable is empty, return False.\n\n\n\n\n\n\nall\n\n\n\n\nall(...)\n    all(iterable) -\n bool\n\n    Return True if bool(x) is True for all values x in the iterable.\n    If the iterable is empty, return True.\n\n\n\n\n\n\nenumerate\n\n\n\n\nL = [i*i for i in range(5)]\n\nfor index, data in enumerate(L):\n    print index + 1, ':', data\n\nfor index, data in enumerate(L,1):\n    print index, ':', data\n\n\n\n\n\n\nreversed\n\n\n\n\nL = [1, 2, 3, 4]\n\nfor item in L[::-1]:\n    print item\n\nfor item in reversed(L):\n    print item\n\n\n\n\n\u4ea4\u6362\n\n\nBad:\n\n\nt = a\na = b\nb = t\n\n\n\n\nGood:\n\n\na, b = b, a\n\n\n\n\n\u62a5\u9519\n\n\nBad:\n\n\nimport sys\nsys.stderr.write('It failed!')\nraise SystemExit(1)\n\n\n\n\nGood:\n\n\nraise SystemExit('It failed!')\n\n\n\n\n\u5168\u5c40\u53d8\u91cf\n\n\nimport sys\nimport test\n\na = 1\n\ndef func1():\n    global a\n    a += 1\n\ndef func2():\n    test.a += 1\n\ndef func3():\n    module = sys.modules['test']\n    module.a += 1\n\nfunc1()\nfunc2()\nfunc3()\n\n\n\n\n\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n\n\n\u6587\u4ef6\n\n\nBad:\n\n\ntry:\n    f = open('/path/to/file', 'r')\n    print f.read()\nfinally:\n    if f:\n        f.close()\n\n\n\n\nGood:\n\n\nwith open('/path/to/file', 'r') as f:\n    print f.read()\n\n\n\n\nBad:\n\n\nwith open('data.txt') as source:\n    with open('target.txt', 'w') as target:\n        target.write(source.read())\n\n\n\n\nGood:\n\n\nwith open('data.txt') as source, open('target.txt', 'w') as target:\n    target.write(source.read())\n\n\n\n\n\u9501\n\n\nBad:\n\n\nimport threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    lock.acquire()\n    print 'Staring', threadName\n    lock.release()\n    while counter:\n        time.sleep(delay)\n        lock.acquire()\n        print '%s: %s' % (threadName, time.ctime(time.time()))\n        lock.release()\n        counter -= 1\n    lock.acquire()\n    print 'Exiting', threadName\n    lock.release()\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'\n\n\n\n\nGood:\n\n\nimport threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    with lock:\n        print 'Staring', threadName\n    while counter:\n        time.sleep(delay)\n        with lock:\n            print '%s: %s' % (threadName, time.ctime(time.time()))\n        counter -= 1\n    with lock:\n        print 'Exiting', threadName\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'\n\n\n\n\n\u6e38\u6807\n\n\nimport MySQLdb\n\ndb = MySQLdb.connect('localhost', 'root', 'password')\nwith db as cursor:\n    cursor.execute('show databases')\n    print cursor.fetchall()\n\n\n\n\n\u8fd0\u7b97\u7cbe\u5ea6\n\n\nimport decimal\n\nwith decimal.localcontext() as ctx:\n    ctx.prec = 22\n    print decimal.getcontext().prec\n\n\n\n\n\u5e76\u53d1\n\n\nBad:\n\n\nimport time\nimport random\nfrom threading import Thread, Condition\n\nqueue = []\nMAX_NUM = 10\ncondition = Condition()\n\nclass ProducerThread(Thread):\n    def run(self):\n        nums = range(5)\n        global queue\n        while True:\n            condition.acquire()\n            if len(queue) == MAX_NUM:\n                print \nQueue full, producer is waiting\n\n                condition.wait()\n                print \nSpace in queue, Consumer notified the producer\n\n            num = random.choice(nums)\n            queue.append(num)\n            print \nProduced\n, num\n            condition.notify()\n            condition.release()\n            time.sleep(random.random())\n\n\nclass ConsumerThread(Thread):\n    def run(self):\n        global queue\n        while True:\n            condition.acquire()\n            if not queue:\n                print \nNothing in queue, consumer is waiting\n\n                condition.wait()\n                print \nProducer added something to queue and notified the consumer\n\n            num = queue.pop(0)\n            print \nConsumed\n, num\n            condition.notify()\n            condition.release()\n            time.sleep(random.random())\n\n\nProducerThread().start()\nConsumerThread().start()\n\n\n\n\nGood:\n\n\nimport time\nimport random\nfrom Queue import Queue\nfrom threading import Thread\n\nqueue = Queue(10)\n\nclass ProducerThread(Thread):\n    def run(self):\n        nums = range(5)\n        global queue\n        while True:\n            num = random.choice(nums)\n            queue.put(num)\n            print \nProduced\n, num\n            time.sleep(random.random())\n\nclass ConsumerThread(Thread):\n    def run(self):\n        global queue\n        while True:\n            num = queue.get()\n            queue.task_done()\n            print \nConsumed\n, num\n            time.sleep(random.random())\n\nProducerThread().start()\nConsumerThread().start()\n\n\n\n\nimport requests\nfrom multiprocessing import Pool\n\ndef get_website_data(url):\n    print requests.get(url)\n\nif __name__ == '__main__':\n    pool = Pool(2)\n    urls = [\n        'http://www.google.com',\n        'http://www.baidu.com',\n        'http://www.163.com'\n    ]\n    pool.map(get_website_data, urls)\n\n\n\n\nimport requests\nfrom requests.exceptions import ConnectionError\nfrom multiprocessing.dummy import Pool as ThreadPool\n\ndef scrape(url):\n    try:\n        print requests.get(url)\n    except ConnectionError:\n        print 'Error Occured', url\n    finally:\n        print 'URL', url, 'Scraped'\n\npool = ThreadPool(processes=3)\nurls = [\n    'https://www.baidu.com',\n    'http://www.meituan.com',\n    'http://blog.csdn.net',\n    'http://xxxyxxx.net'\n]\npool.map(scrape, urls)\n\n\n\n\n\u88c5\u9970\u5668\n\n\nBad:\n\n\nclass Store(object):\n    def get_food(self, username, food):\n        if username != 'admin':\n            raise Exception(\nThis user is not allowed to get food\n)\n        return self.storage.get(food)\n\n    def put_food(self, username, food):\n        if username != 'admin':\n            raise Exception(\nThis user is not allowed to put food\n)\n        self.storage.put(food)\n\n\n\n\nBetter:\n\n\ndef check_is_admin(username):\n    if username != 'admin':\n        raise Exception(\nThis user is not allowed to get food\n)\n\nclass Store(object):\n    def get_food(self, username, food):\n        check_is_admin(username)\n        return self.storage.get(food)\n\n    def put_food(self, username, food):\n        check_is_admin(username)\n        return self.storage.put(food)\n\n\n\n\nGood:\n\n\ndef check_is_admin(f):\n    def wrapper(*args, **kwargs):\n        if kwargs.get('username') != 'admin':\n            raise Exception(\nThis user is not allowed to get food\n)\n        return f(*arg, **kargs)\n    return wrapper\n\nclass Storage(object):\n    @check_is_admin\n    def get_food(self, username, food):\n        return self.storage.get(food)\n\n    @check_is_admin\n    def put_food(self, username, food):\n        return storage.put(food)\n\n\n\n\nBad:\n\n\ndef is_admin(f):\n    def wrapper(*args, **kwargs):\n        if kwargs.get('username') != 'admin':\n            raise Exception(\nThis user is not allowed to get food\n)\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@is_admin\ndef barfoo(username='someone'):\n    '''Do crazy stuff'''\n    pass\n\nprint barfoo.func_doc\nprint barfoo.__name__\n\n\n\n\nGood:\n\n\nimport functools\n\ndef is_admin(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        if kwargs.get(\nusername\n) != 'admin':\n            raise Exception(\nThis user is not allowed to get food\n)\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@is_admin\ndef barfoo(username='someone'):\n    '''Do crazy stuff'''\n    pass\n\nprint barfoo.func_doc\nprint barfoo.__name__\n\n\n\n\nBad:\n\n\nimport functools\n\ndef check_is_admin(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        if kwargs.get(\nusername\n) != 'admin':\n            raise Exception(\nThis user is not allowed to get food\n)\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@check_is_admin\ndef get_food(username, food='chocolate'):\n    return \n{0} get food: {1}\n.format(username, food)\n\nprint get_food('admin')\n\n\n\n\nGood:\n\n\nimport functools\nimport inspect\n\ndef check_is_admin(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        func_args = inspect.getcallargs(f, *args, **kwargs)\n        if func_args.get(\nusername\n) != 'admin':\n            raise Exception(\nThis user is not allowed to get food\n)\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@check_is_admin\ndef get_food(username, food='chocolate'):\n    return \n{0} get food: {1}\n.format(username, food)\n\nprint get_food('admin')\n\n\n\n\nimport inspect\nimport functools\n\ndef check_args(parameters):\n    def decorated(f):\n        @functools.wraps\n        def wrapper(*args, **kwargs):\n            func_args = inspect.getcallargs(f, *args, **kwargs)\n            msg = func_args.get('msg')\n\n            for item in parameters:\n                if msg.body_dict.get(item) is None:\n                    return False, \ncheck failed, %s is not found\n % item\n\n            return f(*args, **kwargs)\n        return wrapper\n    return decorated\n\nclass AsyncMsgHandler(MsgHandler):\n    @check.check_args(['ContainerIdentifier', 'MonitorSecretKey', \nInstanceID\n, \nUUID\n])\n    def init_container(self, msg):\n        pass\n\n\n\n\n\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\n\n\nBad:\n\n\ndef a():\n    return 'a'\n\ndef b():\n    return 'b'\n\ndef c():\n    return 'c'\n\ncmd = raw_input('\n ')\nif cmd == 'a':\n    print a()\nelif cmd == 'b':\n    print b()\nelif cmd == 'c':\n    print c()\nelse:\n    raise Exception('Action not found')\n\n\n\n\nGood:\n\n\nclass A:\n    def fetch_func(self, action):\n        func= getattr(self, action, None)\n        return func\n\n    def execute(self, action):\n        func= self.fetch_func(action)\n        if func is None:\n            return False\n        return func()\n\n    def a(self):\n        return 'a'\n\n    def b(self, msg):\n        return 'b'\n\n    def c(self, msg):\n        return 'c'\n\ni = A()\ncmd = raw_input('\n ')\nresult = i.execute(cmd)\nif result:\n    print result\nelse:\n    raise Exception('Action not found')\n\n\n\n\n\u8bbe\u8ba1\u6a21\u5f0f\n\n\n\u5355\u4f8b\u6a21\u5f0f\n\n\nclass Borg:\n    _shared_state = {}\n\n    def __init__(self):\n        self.__dict__ = self.__shared_state\n\n\n\n\ndef get():\n    if not get.rates:\n        _URL = 'http://www.bankofcanada.ca/stats/assets/csv/fx-seven-day.csv'\n            with urllib.request.urlopen(_URL) as file:\n                for line in file:\n                    pass\n    return get.rates\n\n\n\n\n\u5de5\u5382\u6a21\u5f0f\n\n\nclass Shape:\n    pass\n\nclass Circle(Shape):\n    pass\n\nclass Square(Shape):\n    pass\n\nfor name in [\nCircle\n, \nSquare\n]:\n    cls = globals()[name]\n    obj = cls()", 
            "title": "\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#python", 
            "text": "import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!", 
            "title": "python\u4e4b\u7985"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_1", 
            "text": "\u5207\u7247\u64cd\u4f5c\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u6b65\u957f\u3002   L = [1, 2, 3, 4, 5, 6, 7, 8, 9]  L[2:-2]\n[3, 4, 5, 6, 7]  L[-2:2] # \u8868\u793aL[-2:2:1]\n[]  L[-2:2:-1]\n[8, 7, 6, 5, 4]", 
            "title": "\u5207\u7247"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_2", 
            "text": "[i*i for i in range(1, 21) if i% 2 == 0]\n[4, 16, 36, 64, 100, 144, 196, 256, 324, 400] # \u5217\u8868  {i*i for i in range(1, 21) if i% 2 == 0}\nset([64, 144, 36, 100, 324, 256, 16, 400, 196, 4]) # \u96c6\u5408  {i:i*i for i in range(1, 21) if i% 2 == 0}\n{2: 4, 4: 16, 6: 36, 8: 64, 10: 100, 12: 144, 14: 196, 16: 256, 18: 324, 20: 400} # \u5b57\u5178  [item for item in os.listdir(os.path.expanduser('.')) if os.path.isfile(item)]  [item for item in os.listdir(os.path.expanduser('.')) if os.path.isdir(item)]  {item: os.path.realpath(item) for item in os.listdir(os.path.expanduser('.'))}", 
            "title": "\u5217\u8868\u63a8\u5bfc\u5f0f"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_3", 
            "text": "", 
            "title": "\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_4", 
            "text": "from collections import namedtuple\n\nDiskDevice = namedtuple('DiskDevice', ['major_number minor_number device_name read_count read_merged_count',\n                                       'read_sections time_spent_reading write_count write_merged_count ',\n                                       'write_sections time_spent_write io_requests time_spent_doing_io',\n                                       ' weighted_time_spent_doing_io'])\n\ndef get_disk_info(disk_name):\n    with open('/proc/diskstats') as f:\n        for line in f:\n            if line.split()[2] == disk_name:\n                return DiskDevice(*(line.split()))", 
            "title": "\u5143\u7ec4"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_5", 
            "text": "Bad:  port = kwargs.get('port')\nif port is None:\n    port = 3306  Good:  port = kwargs.get('port', 3306)  Bad:  d = {}\nfor key, value in pairs:\n    if key not in d:\n        d[key] = []\n    d[key].append(value)  Good:  from collections import defaultdict\n\nd = defaultdict(list)\nfor key, value in pairs:\n    d[key].append(value)  Bad:  d = {}\nwith open('/etc/passwd') as f:\n    for line in f:\n        for word in line.strip().split(':'):\n            if word not in d:\n                d[word] = 0\n            d[word] += 1  Better:  from collections import defaultdict\n\nd = defaultdict(int)\nwith open('/etc/passwd') as f:\n    for line in f:\n        for word in line.strip().split(':'):\n            d[word] += 1  Good:  from collections import Counter\n\nword_counts = Counter()\nwith open('test.txt') as f:\n    for line in f:\n        word_counts.update(line.strip().split(':'))  Bad:  result = sorted(zip(d.values(), d.keys()), reverse=True)[:3]\nfor val, key in result:\n    print  key, ':', val  Good:  for key, val in word_counts.most_common(3):\n    print key, ':', val", 
            "title": "\u5b57\u5178"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_6", 
            "text": "list              --- \u6570\u7ec4\uff0c\u5224\u65ad\u5143\u7d20\u6709\u65e0\uff1a\u6162\ncollections.deque --- \u53cc\u5411\u94fe\u8868\nset               --- hash\u8868\uff0c\u5224\u65ad\u5143\u7d20\u6709\u65e0\uff1a\u5feb", 
            "title": "\u65f6\u95f4\u590d\u6742\u5ea6"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#else", 
            "text": "if xxx:\n    pass\nelse:\n    pass  while xxx:\n    pass\nelse:\n    pass  try:\n    pass\nexcept:\n    pass\nelse:\n    pass\nfinally:\n    pass", 
            "title": "else"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_7", 
            "text": "sum  sort  max  min  any   any(...)\n    any(iterable) -  bool\n\n    Return True if bool(x) is True for any x in the iterable.\n    If the iterable is empty, return False.   all   all(...)\n    all(iterable) -  bool\n\n    Return True if bool(x) is True for all values x in the iterable.\n    If the iterable is empty, return True.   enumerate   L = [i*i for i in range(5)]\n\nfor index, data in enumerate(L):\n    print index + 1, ':', data\n\nfor index, data in enumerate(L,1):\n    print index, ':', data   reversed   L = [1, 2, 3, 4]\n\nfor item in L[::-1]:\n    print item\n\nfor item in reversed(L):\n    print item", 
            "title": "\u5185\u7f6e\u51fd\u6570"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_8", 
            "text": "Bad:  t = a\na = b\nb = t  Good:  a, b = b, a", 
            "title": "\u4ea4\u6362"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_9", 
            "text": "Bad:  import sys\nsys.stderr.write('It failed!')\nraise SystemExit(1)  Good:  raise SystemExit('It failed!')", 
            "title": "\u62a5\u9519"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_10", 
            "text": "import sys\nimport test\n\na = 1\n\ndef func1():\n    global a\n    a += 1\n\ndef func2():\n    test.a += 1\n\ndef func3():\n    module = sys.modules['test']\n    module.a += 1\n\nfunc1()\nfunc2()\nfunc3()", 
            "title": "\u5168\u5c40\u53d8\u91cf"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_11", 
            "text": "", 
            "title": "\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_12", 
            "text": "Bad:  try:\n    f = open('/path/to/file', 'r')\n    print f.read()\nfinally:\n    if f:\n        f.close()  Good:  with open('/path/to/file', 'r') as f:\n    print f.read()  Bad:  with open('data.txt') as source:\n    with open('target.txt', 'w') as target:\n        target.write(source.read())  Good:  with open('data.txt') as source, open('target.txt', 'w') as target:\n    target.write(source.read())", 
            "title": "\u6587\u4ef6"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_13", 
            "text": "Bad:  import threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    lock.acquire()\n    print 'Staring', threadName\n    lock.release()\n    while counter:\n        time.sleep(delay)\n        lock.acquire()\n        print '%s: %s' % (threadName, time.ctime(time.time()))\n        lock.release()\n        counter -= 1\n    lock.acquire()\n    print 'Exiting', threadName\n    lock.release()\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'  Good:  import threading\nimport time\n\ndef print_time(threadName, delay, counter):\n    with lock:\n        print 'Staring', threadName\n    while counter:\n        time.sleep(delay)\n        with lock:\n            print '%s: %s' % (threadName, time.ctime(time.time()))\n        counter -= 1\n    with lock:\n        print 'Exiting', threadName\n\nlock = threading.Lock()\n\nt1 = threading.Thread(target=print_time, args=('Thread-1', 1, 5,))\nt2 = threading.Thread(target=print_time, args=('Thread-2', 2, 5,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint 'Exiting Main Thread'", 
            "title": "\u9501"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_14", 
            "text": "import MySQLdb\n\ndb = MySQLdb.connect('localhost', 'root', 'password')\nwith db as cursor:\n    cursor.execute('show databases')\n    print cursor.fetchall()", 
            "title": "\u6e38\u6807"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_15", 
            "text": "import decimal\n\nwith decimal.localcontext() as ctx:\n    ctx.prec = 22\n    print decimal.getcontext().prec", 
            "title": "\u8fd0\u7b97\u7cbe\u5ea6"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_16", 
            "text": "Bad:  import time\nimport random\nfrom threading import Thread, Condition\n\nqueue = []\nMAX_NUM = 10\ncondition = Condition()\n\nclass ProducerThread(Thread):\n    def run(self):\n        nums = range(5)\n        global queue\n        while True:\n            condition.acquire()\n            if len(queue) == MAX_NUM:\n                print  Queue full, producer is waiting \n                condition.wait()\n                print  Space in queue, Consumer notified the producer \n            num = random.choice(nums)\n            queue.append(num)\n            print  Produced , num\n            condition.notify()\n            condition.release()\n            time.sleep(random.random())\n\n\nclass ConsumerThread(Thread):\n    def run(self):\n        global queue\n        while True:\n            condition.acquire()\n            if not queue:\n                print  Nothing in queue, consumer is waiting \n                condition.wait()\n                print  Producer added something to queue and notified the consumer \n            num = queue.pop(0)\n            print  Consumed , num\n            condition.notify()\n            condition.release()\n            time.sleep(random.random())\n\n\nProducerThread().start()\nConsumerThread().start()  Good:  import time\nimport random\nfrom Queue import Queue\nfrom threading import Thread\n\nqueue = Queue(10)\n\nclass ProducerThread(Thread):\n    def run(self):\n        nums = range(5)\n        global queue\n        while True:\n            num = random.choice(nums)\n            queue.put(num)\n            print  Produced , num\n            time.sleep(random.random())\n\nclass ConsumerThread(Thread):\n    def run(self):\n        global queue\n        while True:\n            num = queue.get()\n            queue.task_done()\n            print  Consumed , num\n            time.sleep(random.random())\n\nProducerThread().start()\nConsumerThread().start()  import requests\nfrom multiprocessing import Pool\n\ndef get_website_data(url):\n    print requests.get(url)\n\nif __name__ == '__main__':\n    pool = Pool(2)\n    urls = [\n        'http://www.google.com',\n        'http://www.baidu.com',\n        'http://www.163.com'\n    ]\n    pool.map(get_website_data, urls)  import requests\nfrom requests.exceptions import ConnectionError\nfrom multiprocessing.dummy import Pool as ThreadPool\n\ndef scrape(url):\n    try:\n        print requests.get(url)\n    except ConnectionError:\n        print 'Error Occured', url\n    finally:\n        print 'URL', url, 'Scraped'\n\npool = ThreadPool(processes=3)\nurls = [\n    'https://www.baidu.com',\n    'http://www.meituan.com',\n    'http://blog.csdn.net',\n    'http://xxxyxxx.net'\n]\npool.map(scrape, urls)", 
            "title": "\u5e76\u53d1"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_17", 
            "text": "Bad:  class Store(object):\n    def get_food(self, username, food):\n        if username != 'admin':\n            raise Exception( This user is not allowed to get food )\n        return self.storage.get(food)\n\n    def put_food(self, username, food):\n        if username != 'admin':\n            raise Exception( This user is not allowed to put food )\n        self.storage.put(food)  Better:  def check_is_admin(username):\n    if username != 'admin':\n        raise Exception( This user is not allowed to get food )\n\nclass Store(object):\n    def get_food(self, username, food):\n        check_is_admin(username)\n        return self.storage.get(food)\n\n    def put_food(self, username, food):\n        check_is_admin(username)\n        return self.storage.put(food)  Good:  def check_is_admin(f):\n    def wrapper(*args, **kwargs):\n        if kwargs.get('username') != 'admin':\n            raise Exception( This user is not allowed to get food )\n        return f(*arg, **kargs)\n    return wrapper\n\nclass Storage(object):\n    @check_is_admin\n    def get_food(self, username, food):\n        return self.storage.get(food)\n\n    @check_is_admin\n    def put_food(self, username, food):\n        return storage.put(food)  Bad:  def is_admin(f):\n    def wrapper(*args, **kwargs):\n        if kwargs.get('username') != 'admin':\n            raise Exception( This user is not allowed to get food )\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@is_admin\ndef barfoo(username='someone'):\n    '''Do crazy stuff'''\n    pass\n\nprint barfoo.func_doc\nprint barfoo.__name__  Good:  import functools\n\ndef is_admin(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        if kwargs.get( username ) != 'admin':\n            raise Exception( This user is not allowed to get food )\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@is_admin\ndef barfoo(username='someone'):\n    '''Do crazy stuff'''\n    pass\n\nprint barfoo.func_doc\nprint barfoo.__name__  Bad:  import functools\n\ndef check_is_admin(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        if kwargs.get( username ) != 'admin':\n            raise Exception( This user is not allowed to get food )\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@check_is_admin\ndef get_food(username, food='chocolate'):\n    return  {0} get food: {1} .format(username, food)\n\nprint get_food('admin')  Good:  import functools\nimport inspect\n\ndef check_is_admin(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        func_args = inspect.getcallargs(f, *args, **kwargs)\n        if func_args.get( username ) != 'admin':\n            raise Exception( This user is not allowed to get food )\n        return f(*args, **kwargs)\n    return wrapper\n\n\n@check_is_admin\ndef get_food(username, food='chocolate'):\n    return  {0} get food: {1} .format(username, food)\n\nprint get_food('admin')  import inspect\nimport functools\n\ndef check_args(parameters):\n    def decorated(f):\n        @functools.wraps\n        def wrapper(*args, **kwargs):\n            func_args = inspect.getcallargs(f, *args, **kwargs)\n            msg = func_args.get('msg')\n\n            for item in parameters:\n                if msg.body_dict.get(item) is None:\n                    return False,  check failed, %s is not found  % item\n\n            return f(*args, **kwargs)\n        return wrapper\n    return decorated\n\nclass AsyncMsgHandler(MsgHandler):\n    @check.check_args(['ContainerIdentifier', 'MonitorSecretKey',  InstanceID ,  UUID ])\n    def init_container(self, msg):\n        pass", 
            "title": "\u88c5\u9970\u5668"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_18", 
            "text": "Bad:  def a():\n    return 'a'\n\ndef b():\n    return 'b'\n\ndef c():\n    return 'c'\n\ncmd = raw_input('  ')\nif cmd == 'a':\n    print a()\nelif cmd == 'b':\n    print b()\nelif cmd == 'c':\n    print c()\nelse:\n    raise Exception('Action not found')  Good:  class A:\n    def fetch_func(self, action):\n        func= getattr(self, action, None)\n        return func\n\n    def execute(self, action):\n        func= self.fetch_func(action)\n        if func is None:\n            return False\n        return func()\n\n    def a(self):\n        return 'a'\n\n    def b(self, msg):\n        return 'b'\n\n    def c(self, msg):\n        return 'c'\n\ni = A()\ncmd = raw_input('  ')\nresult = i.execute(cmd)\nif result:\n    print result\nelse:\n    raise Exception('Action not found')", 
            "title": "\u52a8\u6001\u7c7b\u578b\u8bed\u8a00"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_19", 
            "text": "", 
            "title": "\u8bbe\u8ba1\u6a21\u5f0f"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_20", 
            "text": "class Borg:\n    _shared_state = {}\n\n    def __init__(self):\n        self.__dict__ = self.__shared_state  def get():\n    if not get.rates:\n        _URL = 'http://www.bankofcanada.ca/stats/assets/csv/fx-seven-day.csv'\n            with urllib.request.urlopen(_URL) as file:\n                for line in file:\n                    pass\n    return get.rates", 
            "title": "\u5355\u4f8b\u6a21\u5f0f"
        }, 
        {
            "location": "/python_\u8d56\u660e\u661f\u7684\u77e5\u4e4e\u56de\u7b54/#_21", 
            "text": "class Shape:\n    pass\n\nclass Circle(Shape):\n    pass\n\nclass Square(Shape):\n    pass\n\nfor name in [ Circle ,  Square ]:\n    cls = globals()[name]\n    obj = cls()", 
            "title": "\u5de5\u5382\u6a21\u5f0f"
        }, 
        {
            "location": "/c_c/", 
            "text": "\ufeffc\u8bed\u8a00\u7531Thompson\u548cRitchie\u5f00\u53d1\u3002\n\n\n\u6807\u51c6\n\n\n\n\n1989\u5e74\uff0cANSI\u53d1\u5e03\u4e86ANSI C\uff0c\u5b9a\u4e49\u4e86\u8bed\u8a00\u548c\u6807\u51c6\u5e93\uff0c\u79f0\u4e3aC89\u3002\n\n\n1990\u5e74\uff0cISO\u53d1\u5e03\u4e86C90\u3002\n\n\n1999\u5e74\uff0cISO\u53d1\u5e03\u4e86C99\u3002\n\n\n2011\u5e74\uff0cISO\u53d1\u5e03\u4e86C11\u3002\n\n\n\n\n\u7f16\u8bd1\u5668\n\n\nc\u7684\u7f16\u8bd1\u5668\u4e3b\u8981\u6709\n\n\n\n\ngcc\uff1aGNU\n\n\ncl\uff1aMicrosoft\n\n\nclang\n\n\n\n\nUNIX\n\n\nUNIX\u81ea\u5e26\u7f16\u8bd1\u5668cc\uff0c\u4e0d\u5c5e\u4e8e\u4e0a\u8ff0\u7684\u4efb\u4f55\u4e00\u79cd\u3002\n\n\nLinux\n\n\nLinux\u81ea\u5e26\u7f16\u8bd1\u5668gcc\uff0c\u4e0b\u9762\u8bf4\u4e00\u4e0b\u6ce8\u610f\u4e8b\u9879\n\n\n\n\n\u540e\u7f00c\n\n\n\u547d\u4ee4\n\n\n\n\ncc/gcc/g++ test.c # \u751f\u6210a.out\n./a.out           # \u8fd0\u884c\n\ncc/gcc/g++ -o test test.c # \u751f\u6210test\n./test                    # \u8fd0\u884c\n\n\n\n\n\n\n\u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return\n\n\n\n\necho $?\n\n\n\n\nWindows\n\n\nWindows\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528vc\uff0cvs\u7b49ide\uff0c\u63d0\u4f9b\u7f16\u8bd1\u5668cl\uff0c\u4f46\u7531\u4e8e\u4f53\u79ef\u8fc7\u5927\uff0c\u672c\u4eba\u5e76\u6ca1\u6709\u5b89\u88c5\u3002\n\n\n\u672c\u4eba\u5b89\u88c5\u4e86MinGW+Notepad++\uff0c\u5373\u4f7f\u7528gcc\uff0c\u4e0b\u9762\u662f\u6ce8\u610f\u4e8b\u9879\n\n\n\n\n\u540e\u7f00c\n\n\n\u547d\u4ee4\n\n\n\n\ngcc/g++ test.c # \u751f\u6210a.exe\na/a.exe        # \u8fd0\u884c\n\ngcc/g++ -o test test.c # \u751f\u6210test.exe\ntest/test.exe          # \u8fd0\u884c\n\n\n\n\n\n\n\u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return\n\n\n\n\necho %ERRORLEVEL%\n\n\n\n\nMac\n\n\nMac\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528\u96c6\u6210\u73af\u5883Xcode\uff0c\u5176\u63d0\u4f9b\u591a\u79cdc\u7f16\u8bd1\u5668\u3002", 
            "title": "c"
        }, 
        {
            "location": "/c_c/#_1", 
            "text": "1989\u5e74\uff0cANSI\u53d1\u5e03\u4e86ANSI C\uff0c\u5b9a\u4e49\u4e86\u8bed\u8a00\u548c\u6807\u51c6\u5e93\uff0c\u79f0\u4e3aC89\u3002  1990\u5e74\uff0cISO\u53d1\u5e03\u4e86C90\u3002  1999\u5e74\uff0cISO\u53d1\u5e03\u4e86C99\u3002  2011\u5e74\uff0cISO\u53d1\u5e03\u4e86C11\u3002", 
            "title": "\u6807\u51c6"
        }, 
        {
            "location": "/c_c/#_2", 
            "text": "c\u7684\u7f16\u8bd1\u5668\u4e3b\u8981\u6709   gcc\uff1aGNU  cl\uff1aMicrosoft  clang", 
            "title": "\u7f16\u8bd1\u5668"
        }, 
        {
            "location": "/c_c/#unix", 
            "text": "UNIX\u81ea\u5e26\u7f16\u8bd1\u5668cc\uff0c\u4e0d\u5c5e\u4e8e\u4e0a\u8ff0\u7684\u4efb\u4f55\u4e00\u79cd\u3002", 
            "title": "UNIX"
        }, 
        {
            "location": "/c_c/#linux", 
            "text": "Linux\u81ea\u5e26\u7f16\u8bd1\u5668gcc\uff0c\u4e0b\u9762\u8bf4\u4e00\u4e0b\u6ce8\u610f\u4e8b\u9879   \u540e\u7f00c  \u547d\u4ee4   cc/gcc/g++ test.c # \u751f\u6210a.out\n./a.out           # \u8fd0\u884c\n\ncc/gcc/g++ -o test test.c # \u751f\u6210test\n./test                    # \u8fd0\u884c   \u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return   echo $?", 
            "title": "Linux"
        }, 
        {
            "location": "/c_c/#windows", 
            "text": "Windows\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528vc\uff0cvs\u7b49ide\uff0c\u63d0\u4f9b\u7f16\u8bd1\u5668cl\uff0c\u4f46\u7531\u4e8e\u4f53\u79ef\u8fc7\u5927\uff0c\u672c\u4eba\u5e76\u6ca1\u6709\u5b89\u88c5\u3002  \u672c\u4eba\u5b89\u88c5\u4e86MinGW+Notepad++\uff0c\u5373\u4f7f\u7528gcc\uff0c\u4e0b\u9762\u662f\u6ce8\u610f\u4e8b\u9879   \u540e\u7f00c  \u547d\u4ee4   gcc/g++ test.c # \u751f\u6210a.exe\na/a.exe        # \u8fd0\u884c\n\ngcc/g++ -o test test.c # \u751f\u6210test.exe\ntest/test.exe          # \u8fd0\u884c   \u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return   echo %ERRORLEVEL%", 
            "title": "Windows"
        }, 
        {
            "location": "/c_c/#mac", 
            "text": "Mac\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528\u96c6\u6210\u73af\u5883Xcode\uff0c\u5176\u63d0\u4f9b\u591a\u79cdc\u7f16\u8bd1\u5668\u3002", 
            "title": "Mac"
        }, 
        {
            "location": "/c++_c++/", 
            "text": "\ufeffc++\u662fc\u8bed\u8a00\u7684\u7ee7\u627f\uff0c\u7531Stroustrup\u5f00\u53d1\u3002\n\n\n\u6807\u51c6\n\n\n\u7f16\u8bd1\u5668\n\n\nc++\u7684\u7f16\u8bd1\u5668\u4e3b\u8981\u6709\n\n\n\n\ng++\uff1aGNU\n\n\ncl\uff1aMicrosoft\n\n\nclang\n\n\n\n\nUNIX\n\n\nUNIX\u81ea\u5e26\u7f16\u8bd1\u5668cc\uff0c \u4e0d\u5c5e\u4e8e\u4e0a\u8ff0\u7684\u4efb\u4f55\u4e00\u79cd\u3002\n\n\nLinux\n\n\nLinux\u81ea\u5e26\u7f16\u8bd1\u5668g++\uff0c\u4e0b\u9762\u8bf4\u4e00\u4e0b\u6ce8\u610f\u4e8b\u9879\n\n\n\n\n\u540e\u7f00cc\uff0ccp\uff0ccpp\uff0ccxx\uff0cC\n\n\n\u547d\u4ee4\n\n\n\n\ncc/gcc/g++ test.cc # \u751f\u6210a.out\n./a.out            # \u8fd0\u884c\n\ncc/gcc/g++ -o test test.cc # \u751f\u6210test\n./test                     # \u8fd0\u884c\n\n\n\n\n\n\n\u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return\n\n\n\n\necho $?\n\n\n\n\nWindows\n\n\nWindows\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528vc\uff0cvs\u7b49ide\uff0c\u63d0\u4f9b\u7f16\u8bd1\u5668cl\uff0c\u4f46\u7531\u4e8e\u4f53\u79ef\u8fc7\u5927\uff0c\u672c\u4eba\u5e76\u6ca1\u6709\u5b89\u88c5\u3002\n\n\n\u672c\u4eba\u5b89\u88c5\u4e86MinGW+Notepad++\uff0c\u5373\u4f7f\u7528gcc\uff0c\u4e0b\u9762\u662f\u6ce8\u610f\u4e8b\u9879\n\n\n\n\n\u540e\u7f00cc\uff0ccp\uff0ccpp\uff0ccxx\uff0cC\n\n\n\u547d\u4ee4\n\n\n\n\ngcc/g++ test.cc # \u751f\u6210a.exe\na/a.exe         # \u8fd0\u884c\n\ngcc/g++ -o test test.cc # \u751f\u6210test.exe\ntest/test.exe           # \u8fd0\u884c\n\n\n\n\n\n\n\u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return\n\n\n\n\necho %ERRORLEVEL%\n\n\n\n\nMac\n\n\nMac\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528\u96c6\u6210\u73af\u5883Xcode\uff0c\u5176\u63d0\u4f9b\u591a\u79cdc++\u7f16\u8bd1\u5668\u3002", 
            "title": "c++"
        }, 
        {
            "location": "/c++_c++/#_1", 
            "text": "", 
            "title": "\u6807\u51c6"
        }, 
        {
            "location": "/c++_c++/#_2", 
            "text": "c++\u7684\u7f16\u8bd1\u5668\u4e3b\u8981\u6709   g++\uff1aGNU  cl\uff1aMicrosoft  clang", 
            "title": "\u7f16\u8bd1\u5668"
        }, 
        {
            "location": "/c++_c++/#unix", 
            "text": "UNIX\u81ea\u5e26\u7f16\u8bd1\u5668cc\uff0c \u4e0d\u5c5e\u4e8e\u4e0a\u8ff0\u7684\u4efb\u4f55\u4e00\u79cd\u3002", 
            "title": "UNIX"
        }, 
        {
            "location": "/c++_c++/#linux", 
            "text": "Linux\u81ea\u5e26\u7f16\u8bd1\u5668g++\uff0c\u4e0b\u9762\u8bf4\u4e00\u4e0b\u6ce8\u610f\u4e8b\u9879   \u540e\u7f00cc\uff0ccp\uff0ccpp\uff0ccxx\uff0cC  \u547d\u4ee4   cc/gcc/g++ test.cc # \u751f\u6210a.out\n./a.out            # \u8fd0\u884c\n\ncc/gcc/g++ -o test test.cc # \u751f\u6210test\n./test                     # \u8fd0\u884c   \u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return   echo $?", 
            "title": "Linux"
        }, 
        {
            "location": "/c++_c++/#windows", 
            "text": "Windows\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528vc\uff0cvs\u7b49ide\uff0c\u63d0\u4f9b\u7f16\u8bd1\u5668cl\uff0c\u4f46\u7531\u4e8e\u4f53\u79ef\u8fc7\u5927\uff0c\u672c\u4eba\u5e76\u6ca1\u6709\u5b89\u88c5\u3002  \u672c\u4eba\u5b89\u88c5\u4e86MinGW+Notepad++\uff0c\u5373\u4f7f\u7528gcc\uff0c\u4e0b\u9762\u662f\u6ce8\u610f\u4e8b\u9879   \u540e\u7f00cc\uff0ccp\uff0ccpp\uff0ccxx\uff0cC  \u547d\u4ee4   gcc/g++ test.cc # \u751f\u6210a.exe\na/a.exe         # \u8fd0\u884c\n\ngcc/g++ -o test test.cc # \u751f\u6210test.exe\ntest/test.exe           # \u8fd0\u884c   \u67e5\u770bmain\u51fd\u6570\u4e2d\u7684return   echo %ERRORLEVEL%", 
            "title": "Windows"
        }, 
        {
            "location": "/c++_c++/#mac", 
            "text": "Mac\u65e0\u81ea\u5e26\u7f16\u8bd1\u5668\uff0c\u63a8\u8350\u4f7f\u7528\u96c6\u6210\u73af\u5883Xcode\uff0c\u5176\u63d0\u4f9b\u591a\u79cdc++\u7f16\u8bd1\u5668\u3002", 
            "title": "Mac"
        }, 
        {
            "location": "/c++_\u89c4\u8303/", 
            "text": "\ufeff\u4e0b\u9762\u6211\u4eec\u7814\u7a76\u4e00\u4e0bc++\u7684\u98ce\u683c\u89c4\u8303\u3002\n\n\nGoogle\u5f00\u6e90\u9879\u76ee\u98ce\u683c\u6307\u5357\n\n\nGoogle Style Guide\n\u662fGoogle\u4e3a\u4e00\u4e9b\u8bed\u8a00\u5b9a\u5236\u7684\u98ce\u683c\u89c4\u8303\uff0c\u6bd4\u5982c++\u3002", 
            "title": "\u89c4\u8303"
        }, 
        {
            "location": "/c++_\u89c4\u8303/#google", 
            "text": "Google Style Guide \u662fGoogle\u4e3a\u4e00\u4e9b\u8bed\u8a00\u5b9a\u5236\u7684\u98ce\u683c\u89c4\u8303\uff0c\u6bd4\u5982c++\u3002", 
            "title": "Google\u5f00\u6e90\u9879\u76ee\u98ce\u683c\u6307\u5357"
        }
    ]
}